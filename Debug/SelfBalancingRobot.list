
SelfBalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080066e8  080066e8  000166e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a0  080067a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a8  080067a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08006820  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006820  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfa3  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207d  00000000  00000000  0002d086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  0002f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a20  00000000  00000000  0002fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169da  00000000  00000000  00030820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd81  00000000  00000000  000471fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cb91  00000000  00000000  00056f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d0c  00000000  00000000  000e3b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000e7818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080066cc 	.word	0x080066cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080066cc 	.word	0x080066cc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <angle_to_pwm>:
static float pitch_gyro = 0, pitch_accel = 0;
int count = 0;
int pwm;


void angle_to_pwm(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0


	pwm = PID(ref,pitch);
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <angle_to_pwm+0x30>)
 8000e52:	edd3 7a00 	vldr	s15, [r3]
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <angle_to_pwm+0x34>)
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	eef0 0a47 	vmov.f32	s1, s14
 8000e60:	eeb0 0a67 	vmov.f32	s0, s15
 8000e64:	f000 fd28 	bl	80018b8 <PID>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <angle_to_pwm+0x38>)
 8000e6c:	6013      	str	r3, [r2, #0]
	Set_PWM(pwm);
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <angle_to_pwm+0x38>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f95e 	bl	8001134 <Set_PWM>

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000090 	.word	0x20000090
 8000e80:	2000008c 	.word	0x2000008c
 8000e84:	2000009c 	.word	0x2000009c

08000e88 <loop>:

void loop(){
 8000e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0

	int8_t loop_flag = MPU6050_Read_All();
 8000e90:	f000 fc26 	bl	80016e0 <MPU6050_Read_All>
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
	if (loop_flag == MPU6050_OK){
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	f040 8099 	bne.w	8000fd4 <loop+0x14c>
		//pitch_accel = atan2(AX, sqrt(AY*AY + AZ*AZ) * (180/M_PI));
	    pitch_accel = atan2(AY, sqrt(pow(AX, 2) + pow(AZ, 2))) * (180/M_PI);
 8000ea2:	4b9d      	ldr	r3, [pc, #628]	; (8001118 <loop+0x290>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fafa 	bl	80004a0 <__aeabi_f2d>
 8000eac:	4604      	mov	r4, r0
 8000eae:	460d      	mov	r5, r1
 8000eb0:	4b9a      	ldr	r3, [pc, #616]	; (800111c <loop+0x294>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff faf3 	bl	80004a0 <__aeabi_f2d>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 80010f0 <loop+0x268>
 8000ec2:	ec43 2b10 	vmov	d0, r2, r3
 8000ec6:	f004 fa31 	bl	800532c <pow>
 8000eca:	ec59 8b10 	vmov	r8, r9, d0
 8000ece:	4b94      	ldr	r3, [pc, #592]	; (8001120 <loop+0x298>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fae4 	bl	80004a0 <__aeabi_f2d>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	ed9f 1b84 	vldr	d1, [pc, #528]	; 80010f0 <loop+0x268>
 8000ee0:	ec43 2b10 	vmov	d0, r2, r3
 8000ee4:	f004 fa22 	bl	800532c <pow>
 8000ee8:	ec53 2b10 	vmov	r2, r3, d0
 8000eec:	4640      	mov	r0, r8
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f978 	bl	80001e4 <__adddf3>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	ec43 2b17 	vmov	d7, r2, r3
 8000efc:	eeb0 0a47 	vmov.f32	s0, s14
 8000f00:	eef0 0a67 	vmov.f32	s1, s15
 8000f04:	f004 fa82 	bl	800540c <sqrt>
 8000f08:	eeb0 7a40 	vmov.f32	s14, s0
 8000f0c:	eef0 7a60 	vmov.f32	s15, s1
 8000f10:	eeb0 1a47 	vmov.f32	s2, s14
 8000f14:	eef0 1a67 	vmov.f32	s3, s15
 8000f18:	ec45 4b10 	vmov	d0, r4, r5
 8000f1c:	f004 fa04 	bl	8005328 <atan2>
 8000f20:	ec51 0b10 	vmov	r0, r1, d0
 8000f24:	a374      	add	r3, pc, #464	; (adr r3, 80010f8 <loop+0x270>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fb11 	bl	8000550 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fdbb 	bl	8000ab0 <__aeabi_d2f>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a79      	ldr	r2, [pc, #484]	; (8001124 <loop+0x29c>)
 8000f3e:	6013      	str	r3, [r2, #0]
		pitch_gyro = pitch + GX * delay;
 8000f40:	4b79      	ldr	r3, [pc, #484]	; (8001128 <loop+0x2a0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff faab 	bl	80004a0 <__aeabi_f2d>
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	460d      	mov	r5, r1
 8000f4e:	4b77      	ldr	r3, [pc, #476]	; (800112c <loop+0x2a4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff faa4 	bl	80004a0 <__aeabi_f2d>
 8000f58:	a369      	add	r3, pc, #420	; (adr r3, 8001100 <loop+0x278>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f7ff faf7 	bl	8000550 <__aeabi_dmul>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4620      	mov	r0, r4
 8000f68:	4629      	mov	r1, r5
 8000f6a:	f7ff f93b 	bl	80001e4 <__adddf3>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fd9b 	bl	8000ab0 <__aeabi_d2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a6c      	ldr	r2, [pc, #432]	; (8001130 <loop+0x2a8>)
 8000f7e:	6013      	str	r3, [r2, #0]
		pitch = CF_OFFSET_GYRO * pitch_gyro + CF_OFFSET_ACCEL * pitch_accel;
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <loop+0x2a8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa8b 	bl	80004a0 <__aeabi_f2d>
 8000f8a:	a35f      	add	r3, pc, #380	; (adr r3, 8001108 <loop+0x280>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fade 	bl	8000550 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4614      	mov	r4, r2
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	4b61      	ldr	r3, [pc, #388]	; (8001124 <loop+0x29c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa7d 	bl	80004a0 <__aeabi_f2d>
 8000fa6:	a35a      	add	r3, pc, #360	; (adr r3, 8001110 <loop+0x288>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fad0 	bl	8000550 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f7ff f914 	bl	80001e4 <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fd74 	bl	8000ab0 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a57      	ldr	r2, [pc, #348]	; (8001128 <loop+0x2a0>)
 8000fcc:	6013      	str	r3, [r2, #0]
		angle_to_pwm();
 8000fce:	f7ff ff3d 	bl	8000e4c <angle_to_pwm>
		pitch_accel = atan2(AX, sqrt(AY*AY +AZ*AZ) * (180/M_PI));
		pitch_gyro = pitch + GX * delay;
		pitch = CF_OFFSET_GYRO * pitch_gyro + CF_OFFSET_ACCEL * pitch_accel;
	}

}
 8000fd2:	e085      	b.n	80010e0 <loop+0x258>
		pitch_accel = atan2(AX, sqrt(AY*AY +AZ*AZ) * (180/M_PI));
 8000fd4:	4b51      	ldr	r3, [pc, #324]	; (800111c <loop+0x294>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa61 	bl	80004a0 <__aeabi_f2d>
 8000fde:	4604      	mov	r4, r0
 8000fe0:	460d      	mov	r5, r1
 8000fe2:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <loop+0x290>)
 8000fe4:	ed93 7a00 	vldr	s14, [r3]
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <loop+0x290>)
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <loop+0x298>)
 8000ff4:	edd3 6a00 	vldr	s13, [r3]
 8000ff8:	4b49      	ldr	r3, [pc, #292]	; (8001120 <loop+0x298>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001006:	ee17 0a90 	vmov	r0, s15
 800100a:	f7ff fa49 	bl	80004a0 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	ec43 2b10 	vmov	d0, r2, r3
 8001016:	f004 f9f9 	bl	800540c <sqrt>
 800101a:	ec51 0b10 	vmov	r0, r1, d0
 800101e:	a336      	add	r3, pc, #216	; (adr r3, 80010f8 <loop+0x270>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fa94 	bl	8000550 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	ec43 2b17 	vmov	d7, r2, r3
 8001030:	eeb0 1a47 	vmov.f32	s2, s14
 8001034:	eef0 1a67 	vmov.f32	s3, s15
 8001038:	ec45 4b10 	vmov	d0, r4, r5
 800103c:	f004 f974 	bl	8005328 <atan2>
 8001040:	ec53 2b10 	vmov	r2, r3, d0
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fd32 	bl	8000ab0 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	4a35      	ldr	r2, [pc, #212]	; (8001124 <loop+0x29c>)
 8001050:	6013      	str	r3, [r2, #0]
		pitch_gyro = pitch + GX * delay;
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <loop+0x2a0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa22 	bl	80004a0 <__aeabi_f2d>
 800105c:	4604      	mov	r4, r0
 800105e:	460d      	mov	r5, r1
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <loop+0x2a4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa1b 	bl	80004a0 <__aeabi_f2d>
 800106a:	a325      	add	r3, pc, #148	; (adr r3, 8001100 <loop+0x278>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fa6e 	bl	8000550 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff f8b2 	bl	80001e4 <__adddf3>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fd12 	bl	8000ab0 <__aeabi_d2f>
 800108c:	4603      	mov	r3, r0
 800108e:	4a28      	ldr	r2, [pc, #160]	; (8001130 <loop+0x2a8>)
 8001090:	6013      	str	r3, [r2, #0]
		pitch = CF_OFFSET_GYRO * pitch_gyro + CF_OFFSET_ACCEL * pitch_accel;
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <loop+0x2a8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa02 	bl	80004a0 <__aeabi_f2d>
 800109c:	a31a      	add	r3, pc, #104	; (adr r3, 8001108 <loop+0x280>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fa55 	bl	8000550 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4614      	mov	r4, r2
 80010ac:	461d      	mov	r5, r3
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <loop+0x29c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f9f4 	bl	80004a0 <__aeabi_f2d>
 80010b8:	a315      	add	r3, pc, #84	; (adr r3, 8001110 <loop+0x288>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff fa47 	bl	8000550 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4620      	mov	r0, r4
 80010c8:	4629      	mov	r1, r5
 80010ca:	f7ff f88b 	bl	80001e4 <__adddf3>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fceb 	bl	8000ab0 <__aeabi_d2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <loop+0x2a0>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	00000000 	.word	0x00000000
 80010f4:	40000000 	.word	0x40000000
 80010f8:	7e61df46 	.word	0x7e61df46
 80010fc:	404ca5dc 	.word	0x404ca5dc
 8001100:	d2f1a9fc 	.word	0xd2f1a9fc
 8001104:	3f50624d 	.word	0x3f50624d
 8001108:	f5c28f5c 	.word	0xf5c28f5c
 800110c:	3fef5c28 	.word	0x3fef5c28
 8001110:	47ae1480 	.word	0x47ae1480
 8001114:	3f947ae1 	.word	0x3f947ae1
 8001118:	20000194 	.word	0x20000194
 800111c:	20000190 	.word	0x20000190
 8001120:	20000198 	.word	0x20000198
 8001124:	20000098 	.word	0x20000098
 8001128:	2000008c 	.word	0x2000008c
 800112c:	2000019c 	.word	0x2000019c
 8001130:	20000094 	.word	0x20000094

08001134 <Set_PWM>:
#include "hbridge.h"
#include "stdlib.h"

extern TIM_HandleTypeDef htim2;

void Set_PWM(int PWM) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	int8_t direction;
	uint16_t speed = abs(PWM);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfb8      	it	lt
 8001142:	425b      	neglt	r3, r3
 8001144:	81bb      	strh	r3, [r7, #12]

	// Direction is based on angle read from MPU6050
	if (PWM > 2){
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b02      	cmp	r3, #2
 800114a:	dd02      	ble.n	8001152 <Set_PWM+0x1e>
		direction = BACKWARD;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e007      	b.n	8001162 <Set_PWM+0x2e>
	} else if (PWM < 2){
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b01      	cmp	r3, #1
 8001156:	dc02      	bgt.n	800115e <Set_PWM+0x2a>
		direction = FORWARD;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e001      	b.n	8001162 <Set_PWM+0x2e>
	}
	else
		direction = STOP;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]


	if (direction == FORWARD) {
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10e      	bne.n	8001188 <Set_PWM+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2110      	movs	r1, #16
 800116e:	4816      	ldr	r0, [pc, #88]	; (80011c8 <Set_PWM+0x94>)
 8001170:	f001 f920 	bl	80023b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2120      	movs	r1, #32
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <Set_PWM+0x94>)
 800117a:	f001 f91b 	bl	80023b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed);
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <Set_PWM+0x98>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	89ba      	ldrh	r2, [r7, #12]
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
	} else if (direction == STOP) {
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);

	}

}
 8001186:	e01b      	b.n	80011c0 <Set_PWM+0x8c>
	} else if (direction == BACKWARD) {
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001190:	d10e      	bne.n	80011b0 <Set_PWM+0x7c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2110      	movs	r1, #16
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <Set_PWM+0x94>)
 8001198:	f001 f90c 	bl	80023b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <Set_PWM+0x94>)
 80011a2:	f001 f907 	bl	80023b4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <Set_PWM+0x98>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	89ba      	ldrh	r2, [r7, #12]
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011ae:	e007      	b.n	80011c0 <Set_PWM+0x8c>
	} else if (direction == STOP) {
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <Set_PWM+0x8c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <Set_PWM+0x98>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40020400 	.word	0x40020400
 80011cc:	200000f4 	.word	0x200000f4

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fde5 	bl	8001da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f825 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 f97b 	bl	80014d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011e2:	f000 f88f 	bl	8001304 <MX_I2C1_Init>
  MX_TIM2_Init();
 80011e6:	f000 f8bb 	bl	8001360 <MX_TIM2_Init>
  MX_TIM11_Init();
 80011ea:	f000 f92d 	bl	8001448 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <main+0x50>)
 80011f0:	f002 fe7c 	bl	8003eec <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011f4:	2108      	movs	r1, #8
 80011f6:	480a      	ldr	r0, [pc, #40]	; (8001220 <main+0x50>)
 80011f8:	f002 ff8e 	bl	8004118 <HAL_TIM_PWM_Start>
  ok_flag = MPU6050_Init();
 80011fc:	f000 fa16 	bl	800162c <MPU6050_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  while (ok_flag != MPU6050_OK)
 8001204:	e003      	b.n	800120e <main+0x3e>
  {
	  ok_flag = MPU6050_Init();
 8001206:	f000 fa11 	bl	800162c <MPU6050_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  while (ok_flag != MPU6050_OK)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d1f7      	bne.n	8001206 <main+0x36>

  }
  HAL_TIM_Base_Start_IT(&htim11);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <main+0x54>)
 8001218:	f002 fec2 	bl	8003fa0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800121c:	e7fe      	b.n	800121c <main+0x4c>
 800121e:	bf00      	nop
 8001220:	200000f4 	.word	0x200000f4
 8001224:	2000013c 	.word	0x2000013c

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f004 f844 	bl	80052c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <SystemClock_Config+0xd4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a29      	ldr	r2, [pc, #164]	; (80012fc <SystemClock_Config+0xd4>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <SystemClock_Config+0xd4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <SystemClock_Config+0xd8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001274:	4a22      	ldr	r2, [pc, #136]	; (8001300 <SystemClock_Config+0xd8>)
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <SystemClock_Config+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001296:	2310      	movs	r3, #16
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129e:	2300      	movs	r3, #0
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012a2:	2310      	movs	r3, #16
 80012a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012b0:	2307      	movs	r3, #7
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f855 	bl	8003368 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012c4:	f000 f9ac 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2102      	movs	r1, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fab7 	bl	8003858 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80012f0:	f000 f996 	bl	8001620 <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3750      	adds	r7, #80	; 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_I2C1_Init+0x50>)
 800130a:	4a13      	ldr	r2, [pc, #76]	; (8001358 <MX_I2C1_Init+0x54>)
 800130c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_I2C1_Init+0x50>)
 8001310:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_I2C1_Init+0x58>)
 8001312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_I2C1_Init+0x50>)
 8001322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_I2C1_Init+0x50>)
 8001342:	f001 f851 	bl	80023e8 <HAL_I2C_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800134c:	f000 f968 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000a0 	.word	0x200000a0
 8001358:	40005400 	.word	0x40005400
 800135c:	000186a0 	.word	0x000186a0

08001360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_TIM2_Init+0xe4>)
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_TIM2_Init+0xe4>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <MX_TIM2_Init+0xe4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <MX_TIM2_Init+0xe4>)
 80013a6:	2263      	movs	r2, #99	; 0x63
 80013a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_TIM2_Init+0xe4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_TIM2_Init+0xe4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b6:	4823      	ldr	r0, [pc, #140]	; (8001444 <MX_TIM2_Init+0xe4>)
 80013b8:	f002 fd48 	bl	8003e4c <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80013c2:	f000 f92d 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d0:	4619      	mov	r1, r3
 80013d2:	481c      	ldr	r0, [pc, #112]	; (8001444 <MX_TIM2_Init+0xe4>)
 80013d4:	f003 fa10 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013de:	f000 f91f 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM2_Init+0xe4>)
 80013e4:	f002 fe3e 	bl	8004064 <HAL_TIM_PWM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80013ee:	f000 f917 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	4619      	mov	r1, r3
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <MX_TIM2_Init+0xe4>)
 8001402:	f003 fedd 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800140c:	f000 f908 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2208      	movs	r2, #8
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM2_Init+0xe4>)
 8001428:	f003 f924 	bl	8004674 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001432:	f000 f8f5 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM2_Init+0xe4>)
 8001438:	f000 fbf8 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000f4 	.word	0x200000f4

08001448 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_TIM11_Init+0x88>)
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <MX_TIM11_Init+0x8c>)
 800145e:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_TIM11_Init+0x88>)
 8001462:	2204      	movs	r2, #4
 8001464:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_TIM11_Init+0x88>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 16800;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_TIM11_Init+0x88>)
 800146e:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001472:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_TIM11_Init+0x88>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_TIM11_Init+0x88>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <MX_TIM11_Init+0x88>)
 8001482:	f002 fce3 	bl	8003e4c <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 800148c:	f000 f8c8 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <MX_TIM11_Init+0x88>)
 8001492:	f002 fef1 	bl	8004278 <HAL_TIM_IC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 800149c:	f000 f8c0 	bl	8001620 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014a4:	2301      	movs	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_TIM11_Init+0x88>)
 80014b8:	f003 f83f 	bl	800453a <HAL_TIM_IC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 80014c2:	f000 f8ad 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000013c 	.word	0x2000013c
 80014d4:	40014800 	.word	0x40014800

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <MX_GPIO_Init+0x138>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a46      	ldr	r2, [pc, #280]	; (8001610 <MX_GPIO_Init+0x138>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <MX_GPIO_Init+0x138>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <MX_GPIO_Init+0x138>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <MX_GPIO_Init+0x138>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <MX_GPIO_Init+0x138>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <MX_GPIO_Init+0x138>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a38      	ldr	r2, [pc, #224]	; (8001610 <MX_GPIO_Init+0x138>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <MX_GPIO_Init+0x138>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <MX_GPIO_Init+0x138>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <MX_GPIO_Init+0x138>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <MX_GPIO_Init+0x138>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2120      	movs	r1, #32
 8001562:	482c      	ldr	r0, [pc, #176]	; (8001614 <MX_GPIO_Init+0x13c>)
 8001564:	f000 ff26 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2130      	movs	r1, #48	; 0x30
 800156c:	482a      	ldr	r0, [pc, #168]	; (8001618 <MX_GPIO_Init+0x140>)
 800156e:	f000 ff21 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001578:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4824      	ldr	r0, [pc, #144]	; (800161c <MX_GPIO_Init+0x144>)
 800158a:	f000 fd8f 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158e:	230c      	movs	r3, #12
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159e:	2307      	movs	r3, #7
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	481a      	ldr	r0, [pc, #104]	; (8001614 <MX_GPIO_Init+0x13c>)
 80015aa:	f000 fd7f 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ae:	2320      	movs	r3, #32
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <MX_GPIO_Init+0x13c>)
 80015c6:	f000 fd71 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ca:	2301      	movs	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015da:	2302      	movs	r3, #2
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_GPIO_Init+0x140>)
 80015e6:	f000 fd61 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ea:	2330      	movs	r3, #48	; 0x30
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_GPIO_Init+0x140>)
 8001602:	f000 fd53 	bl	80020ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <MPU6050_Init>:
int16_t Gyro_Z_RAW = 0;

float AX, AY, AZ, GX, GY, GZ;

int8_t MPU6050_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2301      	movs	r3, #1
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	2275      	movs	r2, #117	; 0x75
 8001644:	21d0      	movs	r1, #208	; 0xd0
 8001646:	4825      	ldr	r0, [pc, #148]	; (80016dc <MPU6050_Init+0xb0>)
 8001648:	f001 f90c 	bl	8002864 <HAL_I2C_Mem_Read>

	if (check == 104) //if register value is 0x68 the device is there
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b68      	cmp	r3, #104	; 0x68
 8001650:	d13d      	bne.n	80016ce <MPU6050_Init+0xa2>
	{
		Data = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000); //Wake up all the sensors
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2301      	movs	r3, #1
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	1dbb      	adds	r3, r7, #6
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	226b      	movs	r2, #107	; 0x6b
 8001668:	21d0      	movs	r1, #208	; 0xd0
 800166a:	481c      	ldr	r0, [pc, #112]	; (80016dc <MPU6050_Init+0xb0>)
 800166c:	f001 f800 	bl	8002670 <HAL_I2C_Mem_Write>
		Data = 0x00;
 8001670:	2300      	movs	r3, #0
 8001672:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000); //Set the Sampling rate to 1KHz
 8001674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	2301      	movs	r3, #1
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	1dbb      	adds	r3, r7, #6
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	2219      	movs	r2, #25
 8001686:	21d0      	movs	r1, #208	; 0xd0
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <MPU6050_Init+0xb0>)
 800168a:	f000 fff1 	bl	8002670 <HAL_I2C_Mem_Write>
		Data = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG,1, &Data, 1, 1000); //Range is +/- 2g
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2301      	movs	r3, #1
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	1dbb      	adds	r3, r7, #6
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	221c      	movs	r2, #28
 80016a4:	21d0      	movs	r1, #208	; 0xd0
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <MPU6050_Init+0xb0>)
 80016a8:	f000 ffe2 	bl	8002670 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG,1, &Data, 1, 1000); //Range is +/- 250 degree
 80016b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	2301      	movs	r3, #1
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	221b      	movs	r2, #27
 80016c2:	21d0      	movs	r1, #208	; 0xd0
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <MPU6050_Init+0xb0>)
 80016c6:	f000 ffd3 	bl	8002670 <HAL_I2C_Mem_Write>
		return MPU6050_OK;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e001      	b.n	80016d2 <MPU6050_Init+0xa6>
	}
	return MPU6050_I2C_ERR;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200000a0 	.word	0x200000a0

080016e0 <MPU6050_Read_All>:
		return MPU6050_I2C_ERR;
	}
	return MPU6050_OK;
}
int8_t MPU6050_Read_All(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af04      	add	r7, sp, #16
	uint8_t R_data[14];
	HAL_StatusTypeDef returnValue;
	returnValue = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG,1, R_data, 14, 1000);
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	230e      	movs	r3, #14
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	463b      	mov	r3, r7
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	223b      	movs	r2, #59	; 0x3b
 80016f8:	21d0      	movs	r1, #208	; 0xd0
 80016fa:	4861      	ldr	r0, [pc, #388]	; (8001880 <MPU6050_Read_All+0x1a0>)
 80016fc:	f001 f8b2 	bl	8002864 <HAL_I2C_Mem_Read>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
	Accel_X_RAW = (int16_t)((R_data[0] << 8) | R_data[1]);
 8001704:	783b      	ldrb	r3, [r7, #0]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	787b      	ldrb	r3, [r7, #1]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	b21a      	sxth	r2, r3
 8001712:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <MPU6050_Read_All+0x1a4>)
 8001714:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)((R_data[2] << 8) | R_data[3]);
 8001716:	78bb      	ldrb	r3, [r7, #2]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21a      	sxth	r2, r3
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21a      	sxth	r2, r3
 8001724:	4b58      	ldr	r3, [pc, #352]	; (8001888 <MPU6050_Read_All+0x1a8>)
 8001726:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)((R_data[4] << 8) | R_data[5]);
 8001728:	793b      	ldrb	r3, [r7, #4]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	797b      	ldrb	r3, [r7, #5]
 8001730:	b21b      	sxth	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b21a      	sxth	r2, r3
 8001736:	4b55      	ldr	r3, [pc, #340]	; (800188c <MPU6050_Read_All+0x1ac>)
 8001738:	801a      	strh	r2, [r3, #0]
	Gyro_X_RAW = (int16_t)((R_data[8] << 8) | R_data[9]);
 800173a:	7a3b      	ldrb	r3, [r7, #8]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	b21a      	sxth	r2, r3
 8001740:	7a7b      	ldrb	r3, [r7, #9]
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21a      	sxth	r2, r3
 8001748:	4b51      	ldr	r3, [pc, #324]	; (8001890 <MPU6050_Read_All+0x1b0>)
 800174a:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)((R_data[10] << 8) | R_data[11]);
 800174c:	7abb      	ldrb	r3, [r7, #10]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	7afb      	ldrb	r3, [r7, #11]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <MPU6050_Read_All+0x1b4>)
 800175c:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)((R_data[12] << 8) | R_data[13]);
 800175e:	7b3b      	ldrb	r3, [r7, #12]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b21a      	sxth	r2, r3
 8001764:	7b7b      	ldrb	r3, [r7, #13]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <MPU6050_Read_All+0x1b8>)
 800176e:	801a      	strh	r2, [r3, #0]

	AX = Accel_X_RAW / 16384.0; //16,384 is pulled from the datasheet sensivity scale
 8001770:	4b44      	ldr	r3, [pc, #272]	; (8001884 <MPU6050_Read_All+0x1a4>)
 8001772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe80 	bl	800047c <__aeabi_i2d>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <MPU6050_Read_All+0x1bc>)
 8001782:	f7ff f80f 	bl	80007a4 <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f98f 	bl	8000ab0 <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	4a42      	ldr	r2, [pc, #264]	; (80018a0 <MPU6050_Read_All+0x1c0>)
 8001796:	6013      	str	r3, [r2, #0]
	AY = Accel_Y_RAW / 16384.0;
 8001798:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <MPU6050_Read_All+0x1a8>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fe6c 	bl	800047c <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b3c      	ldr	r3, [pc, #240]	; (800189c <MPU6050_Read_All+0x1bc>)
 80017aa:	f7fe fffb 	bl	80007a4 <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff f97b 	bl	8000ab0 <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a39      	ldr	r2, [pc, #228]	; (80018a4 <MPU6050_Read_All+0x1c4>)
 80017be:	6013      	str	r3, [r2, #0]
	AZ = Accel_Z_RAW / 16384.0;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <MPU6050_Read_All+0x1ac>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe58 	bl	800047c <__aeabi_i2d>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <MPU6050_Read_All+0x1bc>)
 80017d2:	f7fe ffe7 	bl	80007a4 <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f967 	bl	8000ab0 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <MPU6050_Read_All+0x1c8>)
 80017e6:	6013      	str	r3, [r2, #0]
	GX = Gyro_X_RAW /131.0; //131.0 is pulled from the datasheet sensivity scale
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <MPU6050_Read_All+0x1b0>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe44 	bl	800047c <__aeabi_i2d>
 80017f4:	a320      	add	r3, pc, #128	; (adr r3, 8001878 <MPU6050_Read_All+0x198>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe ffd3 	bl	80007a4 <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f953 	bl	8000ab0 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <MPU6050_Read_All+0x1cc>)
 800180e:	6013      	str	r3, [r2, #0]
	GY = Gyro_Y_RAW /131.0;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <MPU6050_Read_All+0x1b4>)
 8001812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe30 	bl	800047c <__aeabi_i2d>
 800181c:	a316      	add	r3, pc, #88	; (adr r3, 8001878 <MPU6050_Read_All+0x198>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe ffbf 	bl	80007a4 <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f93f 	bl	8000ab0 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <MPU6050_Read_All+0x1d0>)
 8001836:	6013      	str	r3, [r2, #0]
	GZ = Gyro_Z_RAW /131.0;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MPU6050_Read_All+0x1b8>)
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe1c 	bl	800047c <__aeabi_i2d>
 8001844:	a30c      	add	r3, pc, #48	; (adr r3, 8001878 <MPU6050_Read_All+0x198>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe ffab 	bl	80007a4 <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f92b 	bl	8000ab0 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <MPU6050_Read_All+0x1d4>)
 800185e:	6013      	str	r3, [r2, #0]

	if (returnValue != HAL_OK) {
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <MPU6050_Read_All+0x18c>
		return MPU6050_I2C_ERR;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186a:	e000      	b.n	800186e <MPU6050_Read_All+0x18e>
	}
	return MPU6050_OK;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	00000000 	.word	0x00000000
 800187c:	40606000 	.word	0x40606000
 8001880:	200000a0 	.word	0x200000a0
 8001884:	20000184 	.word	0x20000184
 8001888:	20000186 	.word	0x20000186
 800188c:	20000188 	.word	0x20000188
 8001890:	2000018a 	.word	0x2000018a
 8001894:	2000018c 	.word	0x2000018c
 8001898:	2000018e 	.word	0x2000018e
 800189c:	40d00000 	.word	0x40d00000
 80018a0:	20000190 	.word	0x20000190
 80018a4:	20000194 	.word	0x20000194
 80018a8:	20000198 	.word	0x20000198
 80018ac:	2000019c 	.word	0x2000019c
 80018b0:	200001a0 	.word	0x200001a0
 80018b4:	200001a4 	.word	0x200001a4

080018b8 <PID>:
#define MIN_PWM -80




int PID(float ref, float pitch) {
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	ed87 0a01 	vstr	s0, [r7, #4]
 80018c2:	edc7 0a00 	vstr	s1, [r7]

	static float lastError;
	static float P =0, I =0, D=0, pid_pwm;

	//calculate error
	float error = ref - pitch;
 80018c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ca:	edd7 7a00 	vldr	s15, [r7]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	edc7 7a02 	vstr	s15, [r7, #8]

	//calculate Proportional term
	P = Kp * error;
 80018d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018da:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e2:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <PID+0x178>)
 80018e4:	edc3 7a00 	vstr	s15, [r3]

	//calculate Integral term. Account for wind-up
	I += Ki* error;
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <PID+0x17c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fdd7 	bl	80004a0 <__aeabi_f2d>
 80018f2:	4604      	mov	r4, r0
 80018f4:	460d      	mov	r5, r1
 80018f6:	68b8      	ldr	r0, [r7, #8]
 80018f8:	f7fe fdd2 	bl	80004a0 <__aeabi_f2d>
 80018fc:	a346      	add	r3, pc, #280	; (adr r3, 8001a18 <PID+0x160>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fe25 	bl	8000550 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe fc69 	bl	80001e4 <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f8c9 	bl	8000ab0 <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <PID+0x17c>)
 8001922:	6013      	str	r3, [r2, #0]

	if (I > MAX_PWM)
 8001924:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <PID+0x17c>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001a38 <PID+0x180>
 800192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	dd03      	ble.n	8001940 <PID+0x88>
		I = MAX_PWM;
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <PID+0x17c>)
 800193a:	4a40      	ldr	r2, [pc, #256]	; (8001a3c <PID+0x184>)
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e00c      	b.n	800195a <PID+0xa2>
	else if (I<MIN_PWM){
 8001940:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <PID+0x17c>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001a40 <PID+0x188>
 800194a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d502      	bpl.n	800195a <PID+0xa2>
		I=MIN_PWM;
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <PID+0x17c>)
 8001956:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <PID+0x18c>)
 8001958:	601a      	str	r2, [r3, #0]
	}

	//calculate Derivative term
	D = -Kd * ((error - lastError)/0.001);
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <PID+0x190>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ed97 7a02 	vldr	s14, [r7, #8]
 8001964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001968:	ee17 0a90 	vmov	r0, s15
 800196c:	f7fe fd98 	bl	80004a0 <__aeabi_f2d>
 8001970:	a32b      	add	r3, pc, #172	; (adr r3, 8001a20 <PID+0x168>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe ff15 	bl	80007a4 <__aeabi_ddiv>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	a329      	add	r3, pc, #164	; (adr r3, 8001a28 <PID+0x170>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fde2 	bl	8000550 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f88c 	bl	8000ab0 <__aeabi_d2f>
 8001998:	4603      	mov	r3, r0
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <PID+0x194>)
 800199c:	6013      	str	r3, [r2, #0]

	//total PID value
	pid_pwm = P + I + D;
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <PID+0x178>)
 80019a0:	ed93 7a00 	vldr	s14, [r3]
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <PID+0x17c>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <PID+0x194>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <PID+0x198>)
 80019ba:	edc3 7a00 	vstr	s15, [r3]

	//max sure pwm is bound between allowed min/max thresholds

	int out_pwm = (int) pid_pwm;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <PID+0x198>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c8:	ee17 3a90 	vmov	r3, s15
 80019cc:	60fb      	str	r3, [r7, #12]
	if (pid_pwm > MAX_PWM)
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <PID+0x198>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001a38 <PID+0x180>
 80019d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	dd02      	ble.n	80019e8 <PID+0x130>
		out_pwm = MAX_PWM;
 80019e2:	2350      	movs	r3, #80	; 0x50
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e00c      	b.n	8001a02 <PID+0x14a>
	else if (pid_pwm < MIN_PWM)
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <PID+0x198>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a40 <PID+0x188>
 80019f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	d502      	bpl.n	8001a02 <PID+0x14a>
		out_pwm = MIN_PWM;
 80019fc:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8001a00:	60fb      	str	r3, [r7, #12]

	lastError = error;
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <PID+0x190>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	6013      	str	r3, [r2, #0]

	return out_pwm;
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fb99999 	.word	0x3fb99999
 8001a20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a24:	3f50624d 	.word	0x3f50624d
 8001a28:	9999999a 	.word	0x9999999a
 8001a2c:	bfb99999 	.word	0xbfb99999
 8001a30:	200001a8 	.word	0x200001a8
 8001a34:	200001ac 	.word	0x200001ac
 8001a38:	42a00000 	.word	0x42a00000
 8001a3c:	42a00000 	.word	0x42a00000
 8001a40:	c2a00000 	.word	0xc2a00000
 8001a44:	c2a00000 	.word	0xc2a00000
 8001a48:	200001b0 	.word	0x200001b0
 8001a4c:	200001b4 	.word	0x200001b4
 8001a50:	200001b8 	.word	0x200001b8

08001a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a92:	2007      	movs	r0, #7
 8001a94:	f000 fac8 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_I2C_MspInit+0x84>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12b      	bne.n	8001b1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ae2:	23c0      	movs	r3, #192	; 0xc0
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae6:	2312      	movs	r3, #18
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001af2:	2304      	movs	r3, #4
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <HAL_I2C_MspInit+0x8c>)
 8001afe:	f000 fad5 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_I2C_MspInit+0x88>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40005400 	.word	0x40005400
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020400 	.word	0x40020400

08001b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b090      	sub	sp, #64	; 0x40
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x50>
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a2c      	ldr	r2, [pc, #176]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001b82:	e048      	b.n	8001c16 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM11)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <HAL_TIM_Base_MspInit+0xf0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d143      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0xe2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 f867 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_TIM_Base_MspInit+0x78>
      Error_Handler();
 8001ba8:	f7ff fd3a 	bl	8001620 <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bba:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_TIM_Base_MspInit+0xec>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <HAL_TIM_Base_MspInit+0xf4>)
 8001c02:	f000 fa53 	bl	80020ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201a      	movs	r0, #26
 8001c0c:	f000 fa17 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c10:	201a      	movs	r0, #26
 8001c12:	f000 fa30 	bl	8002076 <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3740      	adds	r7, #64	; 0x40
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40014800 	.word	0x40014800
 8001c28:	40020400 	.word	0x40020400

08001c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d11e      	bne.n	8001c8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_TIM_MspPostInit+0x68>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_TIM_MspPostInit+0x68>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_TIM_MspPostInit+0x68>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <HAL_TIM_MspPostInit+0x6c>)
 8001c88:	f000 fa10 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce8:	f000 f8ae 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE) != RESET) { //checks the status flag register of timer 11
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
	if (__HAL_TIM_GET_IT_SOURCE(&htim11, TIM_IT_UPDATE) != RESET) { //checks if interrupt is enabled for timer 11
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d106      	bne.n	8001d1e <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
		__HAL_TIM_CLEAR_IT(&htim11, TIM_IT_UPDATE); //clears the interrupt flag
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0201 	mvn.w	r2, #1
 8001d18:	611a      	str	r2, [r3, #16]
			loop();
 8001d1a:	f7ff f8b5 	bl	8000e88 <loop>
		}
	}
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8001d20:	f002 fb03 	bl	800432a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000013c 	.word	0x2000013c

08001d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <SystemInit+0x20>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <SystemInit+0x20>)
 8001d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d56:	490e      	ldr	r1, [pc, #56]	; (8001d90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d6c:	4c0b      	ldr	r4, [pc, #44]	; (8001d9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d7a:	f7ff ffd7 	bl	8001d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f003 faaf 	bl	80052e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d82:	f7ff fa25 	bl	80011d0 <main>
  bx  lr    
 8001d86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d94:	080067b0 	.word	0x080067b0
  ldr r2, =_sbss
 8001d98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d9c:	200002f8 	.word	0x200002f8

08001da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC_IRQHandler>
	...

08001da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <HAL_Init+0x40>)
 8001dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_Init+0x40>)
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_Init+0x40>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f92b 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f7ff fe3c 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f943 	bl	8002092 <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e24:	f000 f90b 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	200001bc 	.word	0x200001bc

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	200001bc 	.word	0x200001bc

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4907      	ldr	r1, [pc, #28]	; (8001f24 <__NVIC_EnableIRQ+0x38>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff29 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff3e 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff8e 	bl	8001f7c <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff31 	bl	8001eec <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	e159      	b.n	800237c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f040 8148 	bne.w	8002376 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d005      	beq.n	80020fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d130      	bne.n	8002160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 0201 	and.w	r2, r3, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b03      	cmp	r3, #3
 800216a:	d017      	beq.n	800219c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d123      	bne.n	80021f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a2 	beq.w	8002376 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b57      	ldr	r3, [pc, #348]	; (8002394 <HAL_GPIO_Init+0x2e8>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a56      	ldr	r2, [pc, #344]	; (8002394 <HAL_GPIO_Init+0x2e8>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b54      	ldr	r3, [pc, #336]	; (8002394 <HAL_GPIO_Init+0x2e8>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224e:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_GPIO_Init+0x2ec>)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a49      	ldr	r2, [pc, #292]	; (800239c <HAL_GPIO_Init+0x2f0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x202>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a48      	ldr	r2, [pc, #288]	; (80023a0 <HAL_GPIO_Init+0x2f4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x1fe>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a47      	ldr	r2, [pc, #284]	; (80023a4 <HAL_GPIO_Init+0x2f8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x1fa>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_GPIO_Init+0x2fc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x1f6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a45      	ldr	r2, [pc, #276]	; (80023ac <HAL_GPIO_Init+0x300>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x1f2>
 800229a:	2304      	movs	r3, #4
 800229c:	e008      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 800229e:	2307      	movs	r3, #7
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x204>
 80022ae:	2300      	movs	r3, #0
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c0:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_GPIO_Init+0x2ec>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ce:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <HAL_GPIO_Init+0x304>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f2:	4a2f      	ldr	r2, [pc, #188]	; (80023b0 <HAL_GPIO_Init+0x304>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_GPIO_Init+0x304>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800231c:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <HAL_GPIO_Init+0x304>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_GPIO_Init+0x304>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_GPIO_Init+0x304>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_GPIO_Init+0x304>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002370:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <HAL_GPIO_Init+0x304>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3301      	adds	r3, #1
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	f67f aea2 	bls.w	80020c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40013800 	.word	0x40013800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e12b      	b.n	8002652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fb48 	bl	8001aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800244c:	f001 fbfc 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a81      	ldr	r2, [pc, #516]	; (800265c <HAL_I2C_Init+0x274>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d807      	bhi.n	800246c <HAL_I2C_Init+0x84>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a80      	ldr	r2, [pc, #512]	; (8002660 <HAL_I2C_Init+0x278>)
 8002460:	4293      	cmp	r3, r2
 8002462:	bf94      	ite	ls
 8002464:	2301      	movls	r3, #1
 8002466:	2300      	movhi	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e006      	b.n	800247a <HAL_I2C_Init+0x92>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a7d      	ldr	r2, [pc, #500]	; (8002664 <HAL_I2C_Init+0x27c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0e7      	b.n	8002652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a78      	ldr	r2, [pc, #480]	; (8002668 <HAL_I2C_Init+0x280>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9b      	lsrs	r3, r3, #18
 800248c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_I2C_Init+0x274>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d802      	bhi.n	80024bc <HAL_I2C_Init+0xd4>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3301      	adds	r3, #1
 80024ba:	e009      	b.n	80024d0 <HAL_I2C_Init+0xe8>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a69      	ldr	r2, [pc, #420]	; (800266c <HAL_I2C_Init+0x284>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	3301      	adds	r3, #1
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	495c      	ldr	r1, [pc, #368]	; (800265c <HAL_I2C_Init+0x274>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d819      	bhi.n	8002524 <HAL_I2C_Init+0x13c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e59      	subs	r1, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002504:	400b      	ands	r3, r1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_I2C_Init+0x138>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e59      	subs	r1, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fbb1 f3f3 	udiv	r3, r1, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	e051      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002520:	2304      	movs	r3, #4
 8002522:	e04f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_I2C_Init+0x168>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e012      	b.n	8002576 <HAL_I2C_Init+0x18e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x196>
 800257a:	2301      	movs	r3, #1
 800257c:	e022      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10e      	bne.n	80025a4 <HAL_I2C_Init+0x1bc>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e58      	subs	r0, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	440b      	add	r3, r1
 8002594:	fbb0 f3f3 	udiv	r3, r0, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a2:	e00f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	6809      	ldr	r1, [r1, #0]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6911      	ldr	r1, [r2, #16]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	000186a0 	.word	0x000186a0
 8002660:	001e847f 	.word	0x001e847f
 8002664:	003d08ff 	.word	0x003d08ff
 8002668:	431bde83 	.word	0x431bde83
 800266c:	10624dd3 	.word	0x10624dd3

08002670 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800268a:	f7ff fbf1 	bl	8001e70 <HAL_GetTick>
 800268e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b20      	cmp	r3, #32
 800269a:	f040 80d9 	bne.w	8002850 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2319      	movs	r3, #25
 80026a4:	2201      	movs	r2, #1
 80026a6:	496d      	ldr	r1, [pc, #436]	; (800285c <HAL_I2C_Mem_Write+0x1ec>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fc7f 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	e0cc      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Mem_Write+0x56>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0c5      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d007      	beq.n	80026ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2221      	movs	r2, #33	; 0x21
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2240      	movs	r2, #64	; 0x40
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a4d      	ldr	r2, [pc, #308]	; (8002860 <HAL_I2C_Mem_Write+0x1f0>)
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800272e:	88f8      	ldrh	r0, [r7, #6]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	8979      	ldrh	r1, [r7, #10]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4603      	mov	r3, r0
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fab6 	bl	8002cb0 <I2C_RequestMemoryWrite>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d052      	beq.n	80027f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e081      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fd00 	bl	8003158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b04      	cmp	r3, #4
 8002764:	d107      	bne.n	8002776 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06b      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d11b      	bne.n	80027f0 <HAL_I2C_Mem_Write+0x180>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1aa      	bne.n	800274e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fcec 	bl	80031da <I2C_WaitOnBTFFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b04      	cmp	r3, #4
 800280e:	d107      	bne.n	8002820 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e016      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000

08002864 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4603      	mov	r3, r0
 8002874:	817b      	strh	r3, [r7, #10]
 8002876:	460b      	mov	r3, r1
 8002878:	813b      	strh	r3, [r7, #8]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800287e:	f7ff faf7 	bl	8001e70 <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	f040 8208 	bne.w	8002ca2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2319      	movs	r3, #25
 8002898:	2201      	movs	r2, #1
 800289a:	497b      	ldr	r1, [pc, #492]	; (8002a88 <HAL_I2C_Mem_Read+0x224>)
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fb85 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	e1fb      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Mem_Read+0x56>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e1f4      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d007      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2222      	movs	r2, #34	; 0x22
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_I2C_Mem_Read+0x228>)
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002922:	88f8      	ldrh	r0, [r7, #6]
 8002924:	893a      	ldrh	r2, [r7, #8]
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4603      	mov	r3, r0
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fa52 	bl	8002ddc <I2C_RequestMemoryRead>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1b0      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d113      	bne.n	8002972 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e184      	b.n	8002c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	2b01      	cmp	r3, #1
 8002978:	d11b      	bne.n	80029b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e164      	b.n	8002c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d11b      	bne.n	80029f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	e144      	b.n	8002c7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a08:	e138      	b.n	8002c7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	f200 80f1 	bhi.w	8002bf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d123      	bne.n	8002a64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fc1b 	bl	800325c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e139      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a62:	e10b      	b.n	8002c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d14e      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	2200      	movs	r2, #0
 8002a74:	4906      	ldr	r1, [pc, #24]	; (8002a90 <HAL_I2C_Mem_Read+0x22c>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fa98 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e10e      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
 8002a86:	bf00      	nop
 8002a88:	00100002 	.word	0x00100002
 8002a8c:	ffff0000 	.word	0xffff0000
 8002a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b08:	e0b8      	b.n	8002c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b10:	2200      	movs	r2, #0
 8002b12:	4966      	ldr	r1, [pc, #408]	; (8002cac <HAL_I2C_Mem_Read+0x448>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fa49 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0bf      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	494f      	ldr	r1, [pc, #316]	; (8002cac <HAL_I2C_Mem_Read+0x448>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fa1b 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e091      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bf4:	e042      	b.n	8002c7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fb2e 	bl	800325c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e04c      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d118      	bne.n	8002c7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f47f aec2 	bne.w	8002a0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	00010004 	.word	0x00010004

08002cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	817b      	strh	r3, [r7, #10]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	813b      	strh	r3, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f960 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d00:	d103      	bne.n	8002d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e05f      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	492d      	ldr	r1, [pc, #180]	; (8002dd8 <I2C_RequestMemoryWrite+0x128>)
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f998 	bl	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e04c      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	6a39      	ldr	r1, [r7, #32]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fa02 	bl	8003158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d107      	bne.n	8002d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e02b      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	e021      	b.n	8002dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d88:	893b      	ldrh	r3, [r7, #8]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	6a39      	ldr	r1, [r7, #32]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f9dc 	bl	8003158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d107      	bne.n	8002dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e005      	b.n	8002dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc2:	893b      	ldrh	r3, [r7, #8]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	00010002 	.word	0x00010002

08002ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	817b      	strh	r3, [r7, #10]
 8002dee:	460b      	mov	r3, r1
 8002df0:	813b      	strh	r3, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f8c2 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3c:	d103      	bne.n	8002e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0aa      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	4952      	ldr	r1, [pc, #328]	; (8002fa8 <I2C_RequestMemoryRead+0x1cc>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f8fa 	bl	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e097      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f964 	bl	8003158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d107      	bne.n	8002eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e076      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb8:	893b      	ldrh	r3, [r7, #8]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	e021      	b.n	8002f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f93e 	bl	8003158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d107      	bne.n	8002efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e050      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002efe:	893b      	ldrh	r3, [r7, #8]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	6a39      	ldr	r1, [r7, #32]
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f923 	bl	8003158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00d      	beq.n	8002f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d107      	bne.n	8002f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e035      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f82b 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6a:	d103      	bne.n	8002f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e013      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f78:	897b      	ldrh	r3, [r7, #10]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	4906      	ldr	r1, [pc, #24]	; (8002fa8 <I2C_RequestMemoryRead+0x1cc>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f863 	bl	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	00010002 	.word	0x00010002

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	e025      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc4:	d021      	beq.n	800300a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe ff53 	bl	8001e70 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d116      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e023      	b.n	8003052 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10d      	bne.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	e00c      	b.n	800304a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	429a      	cmp	r2, r3
 800304e:	d0b6      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003068:	e051      	b.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d123      	bne.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003088:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003092:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0204 	orr.w	r2, r3, #4
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e046      	b.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c8:	d021      	beq.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ca:	f7fe fed1 	bl	8001e70 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d116      	bne.n	800310e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f043 0220 	orr.w	r2, r3, #32
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e020      	b.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10c      	bne.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4013      	ands	r3, r2
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e00b      	b.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d18d      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003164:	e02d      	b.n	80031c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f8ce 	bl	8003308 <I2C_IsAcknowledgeFailed>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e02d      	b.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d021      	beq.n	80031c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe fe77 	bl	8001e70 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0220 	orr.w	r2, r3, #32
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e007      	b.n	80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031cc:	2b80      	cmp	r3, #128	; 0x80
 80031ce:	d1ca      	bne.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e6:	e02d      	b.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f88d 	bl	8003308 <I2C_IsAcknowledgeFailed>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e02d      	b.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031fe:	d021      	beq.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003200:	f7fe fe36 	bl	8001e70 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e007      	b.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d1ca      	bne.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003268:	e042      	b.n	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d119      	bne.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e029      	b.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	f7fe fde0 	bl	8001e70 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e007      	b.n	8003300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b40      	cmp	r3, #64	; 0x40
 80032fc:	d1b5      	bne.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d11b      	bne.n	8003358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e267      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d075      	beq.n	8003472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003386:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d00c      	beq.n	80033ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339a:	2b08      	cmp	r3, #8
 800339c:	d112      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ac:	4b7e      	ldr	r3, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d05b      	beq.n	8003470 <HAL_RCC_OscConfig+0x108>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d157      	bne.n	8003470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e242      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d106      	bne.n	80033dc <HAL_RCC_OscConfig+0x74>
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a75      	ldr	r2, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e01d      	b.n	8003418 <HAL_RCC_OscConfig+0xb0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x98>
 80033e6:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6f      	ldr	r2, [pc, #444]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6c      	ldr	r2, [pc, #432]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0xb0>
 8003400:	4b69      	ldr	r3, [pc, #420]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a68      	ldr	r2, [pc, #416]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fd26 	bl	8001e70 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fd22 	bl	8001e70 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e207      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xc0>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fd12 	bl	8001e70 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fd0e 	bl	8001e70 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1f3      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	4b51      	ldr	r3, [pc, #324]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0xe8>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003492:	2b08      	cmp	r3, #8
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCC_OscConfig+0x152>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1c7      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e03a      	b.n	8003546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_RCC_OscConfig+0x244>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fe fcc7 	bl	8001e70 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fe fcc3 	bl	8001e70 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1a8      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b28      	ldr	r3, [pc, #160]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4925      	ldr	r1, [pc, #148]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_OscConfig+0x244>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fca6 	bl	8001e70 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003528:	f7fe fca2 	bl	8001e70 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e187      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d036      	beq.n	80035c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCC_OscConfig+0x248>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe fc86 	bl	8001e70 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003568:	f7fe fc82 	bl	8001e70 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e167      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x200>
 8003586:	e01b      	b.n	80035c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_OscConfig+0x248>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358e:	f7fe fc6f 	bl	8001e70 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	e00e      	b.n	80035b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003596:	f7fe fc6b 	bl	8001e70 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d907      	bls.n	80035b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e150      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	42470000 	.word	0x42470000
 80035b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ea      	bne.n	8003596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8097 	beq.w	80036fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b7d      	ldr	r3, [pc, #500]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a7c      	ldr	r2, [pc, #496]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b77      	ldr	r3, [pc, #476]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b74      	ldr	r3, [pc, #464]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a73      	ldr	r2, [pc, #460]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe fc2b 	bl	8001e70 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fe fc27 	bl	8001e70 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e10c      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x2ea>
 8003644:	4b64      	ldr	r3, [pc, #400]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a63      	ldr	r2, [pc, #396]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x324>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x30c>
 800365a:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
 8003666:	4b5c      	ldr	r3, [pc, #368]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0x324>
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a57      	ldr	r2, [pc, #348]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	4b55      	ldr	r3, [pc, #340]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a54      	ldr	r2, [pc, #336]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe fbec 	bl	8001e70 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fe fbe8 	bl	8001e70 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0cb      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ee      	beq.n	800369c <HAL_RCC_OscConfig+0x334>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7fe fbd6 	bl	8001e70 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fbd2 	bl	8001e70 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0b5      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ee      	bne.n	80036c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4a38      	ldr	r2, [pc, #224]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a1 	beq.w	8003848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003706:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d05c      	beq.n	80037cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d141      	bne.n	800379e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe fba6 	bl	8001e70 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe fba2 	bl	8001e70 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e087      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	491b      	ldr	r1, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x478>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fb7b 	bl	8001e70 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe fb77 	bl	8001e70 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e05c      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x416>
 800379c:	e054      	b.n	8003848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCC_OscConfig+0x478>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fb64 	bl	8001e70 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe fb60 	bl	8001e70 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e045      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x444>
 80037ca:	e03d      	b.n	8003848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e038      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000
 80037e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x4ec>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d121      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11a      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800381c:	4293      	cmp	r3, r2
 800381e:	d111      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d107      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800

08003858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0cc      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d90c      	bls.n	8003894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d044      	beq.n	8003978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d119      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d003      	beq.n	8003916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003912:	2b03      	cmp	r3, #3
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e067      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4934      	ldr	r1, [pc, #208]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7fe fa92 	bl	8001e70 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7fe fa8e 	bl	8001e70 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e04f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d20c      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	490a      	ldr	r1, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	5ccb      	ldrb	r3, [r1, r3]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe f9f2 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023c00 	.word	0x40023c00
 8003a14:	40023800 	.word	0x40023800
 8003a18:	080066e8 	.word	0x080066e8
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	20000004 	.word	0x20000004

08003a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b094      	sub	sp, #80	; 0x50
 8003a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a30:	2300      	movs	r3, #0
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a34:	2300      	movs	r3, #0
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3c:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d00d      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x40>
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	f200 80e1 	bhi.w	8003c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x34>
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a56:	e0db      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a5c:	e0db      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5e:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a62:	e0d8      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a64:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	2200      	movs	r2, #0
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
 8003a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a96:	4622      	mov	r2, r4
 8003a98:	462b      	mov	r3, r5
 8003a9a:	f04f 0000 	mov.w	r0, #0
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	0159      	lsls	r1, r3, #5
 8003aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa8:	0150      	lsls	r0, r2, #5
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4621      	mov	r1, r4
 8003ab0:	1a51      	subs	r1, r2, r1
 8003ab2:	6139      	str	r1, [r7, #16]
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac8:	4659      	mov	r1, fp
 8003aca:	018b      	lsls	r3, r1, #6
 8003acc:	4651      	mov	r1, sl
 8003ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	018a      	lsls	r2, r1, #6
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8003adc:	4659      	mov	r1, fp
 8003ade:	eb63 0901 	sbc.w	r9, r3, r1
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af6:	4690      	mov	r8, r2
 8003af8:	4699      	mov	r9, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	eb18 0303 	adds.w	r3, r8, r3
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	462b      	mov	r3, r5
 8003b04:	eb49 0303 	adc.w	r3, r9, r3
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b16:	4629      	mov	r1, r5
 8003b18:	024b      	lsls	r3, r1, #9
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b20:	4621      	mov	r1, r4
 8003b22:	024a      	lsls	r2, r1, #9
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b34:	f7fd f80c 	bl	8000b50 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	e058      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	f04f 0000 	mov.w	r0, #0
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	0159      	lsls	r1, r3, #5
 8003b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6e:	0150      	lsls	r0, r2, #5
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4641      	mov	r1, r8
 8003b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b94:	ebb2 040a 	subs.w	r4, r2, sl
 8003b98:	eb63 050b 	sbc.w	r5, r3, fp
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	00eb      	lsls	r3, r5, #3
 8003ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003baa:	00e2      	lsls	r2, r4, #3
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	18e3      	adds	r3, r4, r3
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	eb45 0303 	adc.w	r3, r5, r3
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	028b      	lsls	r3, r1, #10
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	028a      	lsls	r2, r1, #10
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	61fa      	str	r2, [r7, #28]
 8003be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be8:	f7fc ffb2 	bl	8000b50 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3750      	adds	r7, #80	; 0x50
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	007a1200 	.word	0x007a1200

08003c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000000 	.word	0x20000000

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	f7ff fff0 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0a9b      	lsrs	r3, r3, #10
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	080066f8 	.word	0x080066f8

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d035      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c98:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9e:	f7fe f8e7 	bl	8001e70 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ca6:	f7fe f8e3 	bl	8001e70 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0ba      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb8:	4b60      	ldr	r3, [pc, #384]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	019a      	lsls	r2, r3, #6
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	071b      	lsls	r3, r3, #28
 8003cd0:	495a      	ldr	r1, [pc, #360]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd8:	4b57      	ldr	r3, [pc, #348]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cde:	f7fe f8c7 	bl	8001e70 <HAL_GetTick>
 8003ce2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ce6:	f7fe f8c3 	bl	8001e70 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e09a      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8083 	beq.w	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
 8003d22:	4b46      	ldr	r3, [pc, #280]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d2e:	4b44      	ldr	r3, [pc, #272]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a43      	ldr	r2, [pc, #268]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d3a:	f7fe f899 	bl	8001e70 <HAL_GetTick>
 8003d3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fe f895 	bl	8001e70 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e06c      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d54:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d60:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02f      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d94:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d9a:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d114      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003da6:	f7fe f863 	bl	8001e70 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fe f85f 	bl	8001e70 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e034      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ee      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ddc:	d10d      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	4912      	ldr	r1, [pc, #72]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
 8003df8:	e005      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e04:	6093      	str	r3, [r2, #8]
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e12:	490a      	ldr	r1, [pc, #40]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7c1a      	ldrb	r2, [r3, #16]
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e2a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	42470068 	.word	0x42470068
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470e40 	.word	0x42470e40
 8003e48:	424711e0 	.word	0x424711e0

08003e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e041      	b.n	8003ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd fe5e 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f000 fdae 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d001      	beq.n	8003f04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e03c      	b.n	8003f7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_TIM_Base_Start+0xa0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <HAL_TIM_Base_Start+0x5c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d013      	beq.n	8003f48 <HAL_TIM_Base_Start+0x5c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_TIM_Base_Start+0xa4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_TIM_Base_Start+0x5c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_TIM_Base_Start+0xa8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_TIM_Base_Start+0x5c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_TIM_Base_Start+0xac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_TIM_Base_Start+0x5c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <HAL_TIM_Base_Start+0xb0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d111      	bne.n	8003f6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d010      	beq.n	8003f7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	e007      	b.n	8003f7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00
 8003f9c:	40014000 	.word	0x40014000

08003fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d001      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e044      	b.n	8004042 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_TIM_Base_Start_IT+0xb0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d018      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d013      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00e      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a17      	ldr	r2, [pc, #92]	; (800405c <HAL_TIM_Base_Start_IT+0xbc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x6c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a16      	ldr	r2, [pc, #88]	; (8004060 <HAL_TIM_Base_Start_IT+0xc0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b06      	cmp	r3, #6
 800401c:	d010      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402e:	e007      	b.n	8004040 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40000c00 	.word	0x40000c00
 8004060:	40014000 	.word	0x40014000

08004064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e041      	b.n	80040fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f839 	bl	8004102 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 fca2 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_TIM_PWM_Start+0x24>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e022      	b.n	8004182 <HAL_TIM_PWM_Start+0x6a>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d109      	bne.n	8004156 <HAL_TIM_PWM_Start+0x3e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e015      	b.n	8004182 <HAL_TIM_PWM_Start+0x6a>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d109      	bne.n	8004170 <HAL_TIM_PWM_Start+0x58>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e008      	b.n	8004182 <HAL_TIM_PWM_Start+0x6a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e068      	b.n	800425c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Start+0x82>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004198:	e013      	b.n	80041c2 <HAL_TIM_PWM_Start+0xaa>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d104      	bne.n	80041aa <HAL_TIM_PWM_Start+0x92>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a8:	e00b      	b.n	80041c2 <HAL_TIM_PWM_Start+0xaa>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d104      	bne.n	80041ba <HAL_TIM_PWM_Start+0xa2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b8:	e003      	b.n	80041c2 <HAL_TIM_PWM_Start+0xaa>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2201      	movs	r2, #1
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 ffd2 	bl	8005174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a23      	ldr	r2, [pc, #140]	; (8004264 <HAL_TIM_PWM_Start+0x14c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d107      	bne.n	80041ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_TIM_PWM_Start+0x14c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_TIM_PWM_Start+0x10e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d013      	beq.n	8004226 <HAL_TIM_PWM_Start+0x10e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_TIM_PWM_Start+0x150>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIM_PWM_Start+0x10e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <HAL_TIM_PWM_Start+0x154>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIM_PWM_Start+0x10e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <HAL_TIM_PWM_Start+0x158>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIM_PWM_Start+0x10e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a14      	ldr	r2, [pc, #80]	; (8004274 <HAL_TIM_PWM_Start+0x15c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d111      	bne.n	800424a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d010      	beq.n	800425a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	e007      	b.n	800425a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000

08004278 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f839 	bl	8004316 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 fb98 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b02      	cmp	r3, #2
 800433e:	d122      	bne.n	8004386 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d11b      	bne.n	8004386 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0202 	mvn.w	r2, #2
 8004356:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fb1e 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 8004372:	e005      	b.n	8004380 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fb10 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fb21 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d122      	bne.n	80043da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d11b      	bne.n	80043da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f06f 0204 	mvn.w	r2, #4
 80043aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 faf4 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 80043c6:	e005      	b.n	80043d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fae6 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 faf7 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d122      	bne.n	800442e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d11b      	bne.n	800442e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f06f 0208 	mvn.w	r2, #8
 80043fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2204      	movs	r2, #4
 8004404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 faca 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 800441a:	e005      	b.n	8004428 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fabc 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 facd 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b10      	cmp	r3, #16
 800443a:	d122      	bne.n	8004482 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b10      	cmp	r3, #16
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0210 	mvn.w	r2, #16
 8004452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2208      	movs	r2, #8
 8004458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 faa0 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fa92 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 faa3 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d10e      	bne.n	80044ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0201 	mvn.w	r2, #1
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa6c 	bl	8004986 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d10e      	bne.n	80044da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c6:	2b80      	cmp	r3, #128	; 0x80
 80044c8:	d107      	bne.n	80044da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 feeb 	bl	80052b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d10e      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fa68 	bl	80049d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b20      	cmp	r3, #32
 8004512:	d10e      	bne.n	8004532 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b20      	cmp	r3, #32
 8004520:	d107      	bne.n	8004532 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f06f 0220 	mvn.w	r2, #32
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 feb5 	bl	800529c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004554:	2302      	movs	r3, #2
 8004556:	e088      	b.n	800466a <HAL_TIM_IC_ConfigChannel+0x130>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11b      	bne.n	800459e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f000 fc45 	bl	8004e04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 020c 	bic.w	r2, r2, #12
 8004588:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6999      	ldr	r1, [r3, #24]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	619a      	str	r2, [r3, #24]
 800459c:	e060      	b.n	8004660 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d11c      	bne.n	80045de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6819      	ldr	r1, [r3, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f000 fcbd 	bl	8004f32 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6999      	ldr	r1, [r3, #24]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	619a      	str	r2, [r3, #24]
 80045dc:	e040      	b.n	8004660 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f000 fd0a 	bl	800500c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 020c 	bic.w	r2, r2, #12
 8004606:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69d9      	ldr	r1, [r3, #28]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	61da      	str	r2, [r3, #28]
 800461a:	e021      	b.n	8004660 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d11c      	bne.n	800465c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f000 fd27 	bl	8005084 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004644:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	021a      	lsls	r2, r3, #8
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	61da      	str	r2, [r3, #28]
 800465a:	e001      	b.n	8004660 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004668:	7dfb      	ldrb	r3, [r7, #23]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800468e:	2302      	movs	r3, #2
 8004690:	e0ae      	b.n	80047f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	f200 809f 	bhi.w	80047e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080047e1 	.word	0x080047e1
 80046b0:	080047e1 	.word	0x080047e1
 80046b4:	080047e1 	.word	0x080047e1
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	080047e1 	.word	0x080047e1
 80046c0:	080047e1 	.word	0x080047e1
 80046c4:	080047e1 	.word	0x080047e1
 80046c8:	0800475f 	.word	0x0800475f
 80046cc:	080047e1 	.word	0x080047e1
 80046d0:	080047e1 	.word	0x080047e1
 80046d4:	080047e1 	.word	0x080047e1
 80046d8:	0800479f 	.word	0x0800479f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa02 	bl	8004aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]
      break;
 800471a:	e064      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fa48 	bl	8004bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      break;
 800475c:	e043      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fa93 	bl	8004c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0204 	bic.w	r2, r2, #4
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
      break;
 800479c:	e023      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fadd 	bl	8004d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
      break;
 80047de:	e002      	b.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
      break;
 80047e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIM_ConfigClockSource+0x1c>
 8004810:	2302      	movs	r3, #2
 8004812:	e0b4      	b.n	800497e <HAL_TIM_ConfigClockSource+0x186>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484c:	d03e      	beq.n	80048cc <HAL_TIM_ConfigClockSource+0xd4>
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004852:	f200 8087 	bhi.w	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485a:	f000 8086 	beq.w	800496a <HAL_TIM_ConfigClockSource+0x172>
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	d87f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b70      	cmp	r3, #112	; 0x70
 8004866:	d01a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xa6>
 8004868:	2b70      	cmp	r3, #112	; 0x70
 800486a:	d87b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b60      	cmp	r3, #96	; 0x60
 800486e:	d050      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x11a>
 8004870:	2b60      	cmp	r3, #96	; 0x60
 8004872:	d877      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b50      	cmp	r3, #80	; 0x50
 8004876:	d03c      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004878:	2b50      	cmp	r3, #80	; 0x50
 800487a:	d873      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d058      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x13a>
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d86f      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b30      	cmp	r3, #48	; 0x30
 8004886:	d064      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	2b30      	cmp	r3, #48	; 0x30
 800488a:	d86b      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b20      	cmp	r3, #32
 800488e:	d060      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d867      	bhi.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05c      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d05a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x15a>
 800489c:	e062      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f000 fc41 	bl	8005134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]
      break;
 80048ca:	e04f      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f000 fc2a 	bl	8005134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ee:	609a      	str	r2, [r3, #8]
      break;
 80048f0:	e03c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 fae8 	bl	8004ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2150      	movs	r1, #80	; 0x50
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fbf7 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004910:	e02c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	461a      	mov	r2, r3
 8004920:	f000 fb44 	bl	8004fac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2160      	movs	r1, #96	; 0x60
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fbe7 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004930:	e01c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	461a      	mov	r2, r3
 8004940:	f000 fac8 	bl	8004ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2140      	movs	r1, #64	; 0x40
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fbd7 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004950:	e00c      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 fbce 	bl	80050fe <TIM_ITRx_SetConfig>
      break;
 8004962:	e003      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      break;
 8004968:	e000      	b.n	800496c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800496a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a34      	ldr	r2, [pc, #208]	; (8004ad0 <TIM_Base_SetConfig+0xe4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x38>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x38>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a31      	ldr	r2, [pc, #196]	; (8004ad4 <TIM_Base_SetConfig+0xe8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x38>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a30      	ldr	r2, [pc, #192]	; (8004ad8 <TIM_Base_SetConfig+0xec>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x38>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	; (8004adc <TIM_Base_SetConfig+0xf0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a25      	ldr	r2, [pc, #148]	; (8004ad0 <TIM_Base_SetConfig+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01b      	beq.n	8004a76 <TIM_Base_SetConfig+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d017      	beq.n	8004a76 <TIM_Base_SetConfig+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <TIM_Base_SetConfig+0xe8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <TIM_Base_SetConfig+0x8a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <TIM_Base_SetConfig+0xec>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00f      	beq.n	8004a76 <TIM_Base_SetConfig+0x8a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a20      	ldr	r2, [pc, #128]	; (8004adc <TIM_Base_SetConfig+0xf0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_Base_SetConfig+0x8a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <TIM_Base_SetConfig+0xf4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_Base_SetConfig+0x8a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <TIM_Base_SetConfig+0xf8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_Base_SetConfig+0x8a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <TIM_Base_SetConfig+0xfc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d108      	bne.n	8004a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <TIM_Base_SetConfig+0xe4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d103      	bne.n	8004abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	615a      	str	r2, [r3, #20]
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40014400 	.word	0x40014400
 8004ae8:	40014800 	.word	0x40014800

08004aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 0302 	bic.w	r3, r3, #2
 8004b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <TIM_OC1_SetConfig+0xc8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10c      	bne.n	8004b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0308 	bic.w	r3, r3, #8
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <TIM_OC1_SetConfig+0xc8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d111      	bne.n	8004b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40010000 	.word	0x40010000

08004bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0320 	bic.w	r3, r3, #32
 8004c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <TIM_OC2_SetConfig+0xd4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10d      	bne.n	8004c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <TIM_OC2_SetConfig+0xd4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d113      	bne.n	8004c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000

08004c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <TIM_OC3_SetConfig+0xd0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d10d      	bne.n	8004d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <TIM_OC3_SetConfig+0xd0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d113      	bne.n	8004d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40010000 	.word	0x40010000

08004d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <TIM_OC4_SetConfig+0x9c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d109      	bne.n	8004dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	019b      	lsls	r3, r3, #6
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000

08004e04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0201 	bic.w	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <TIM_TI1_SetConfig+0xbc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <TIM_TI1_SetConfig+0x56>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d00f      	beq.n	8004e5a <TIM_TI1_SetConfig+0x56>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <TIM_TI1_SetConfig+0xc0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_TI1_SetConfig+0x56>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <TIM_TI1_SetConfig+0xc4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_TI1_SetConfig+0x56>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <TIM_TI1_SetConfig+0xc8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_TI1_SetConfig+0x56>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <TIM_TI1_SetConfig+0xcc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <TIM_TI1_SetConfig+0x5a>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <TIM_TI1_SetConfig+0x5c>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e003      	b.n	8004e7e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f023 030a 	bic.w	r3, r3, #10
 8004e98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f003 030a 	and.w	r3, r3, #10
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40014000 	.word	0x40014000

08004ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 030a 	bic.w	r3, r3, #10
 8004f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b087      	sub	sp, #28
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 0210 	bic.w	r2, r3, #16
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f023 0210 	bic.w	r2, r3, #16
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	031b      	lsls	r3, r3, #12
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fe8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	621a      	str	r2, [r3, #32]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 0303 	bic.w	r3, r3, #3
 8005038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	b2db      	uxtb	r3, r3
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800505c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	621a      	str	r2, [r3, #32]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	031b      	lsls	r3, r3, #12
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80050d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	031b      	lsls	r3, r3, #12
 80050dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	f043 0307 	orr.w	r3, r3, #7
 8005120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800514e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	021a      	lsls	r2, r3, #8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	431a      	orrs	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4313      	orrs	r3, r2
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2201      	movs	r2, #1
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1a      	ldr	r2, [r3, #32]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1a      	ldr	r2, [r3, #32]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ac:	431a      	orrs	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e050      	b.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d018      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d013      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a18      	ldr	r2, [pc, #96]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a13      	ldr	r2, [pc, #76]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10c      	bne.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4313      	orrs	r3, r2
 800525e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40010000 	.word	0x40010000
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40014000 	.word	0x40014000

0800529c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <memset>:
 80052c4:	4402      	add	r2, r0
 80052c6:	4603      	mov	r3, r0
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d100      	bne.n	80052ce <memset+0xa>
 80052cc:	4770      	bx	lr
 80052ce:	f803 1b01 	strb.w	r1, [r3], #1
 80052d2:	e7f9      	b.n	80052c8 <memset+0x4>

080052d4 <__errno>:
 80052d4:	4b01      	ldr	r3, [pc, #4]	; (80052dc <__errno+0x8>)
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000058 	.word	0x20000058

080052e0 <__libc_init_array>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	4d0d      	ldr	r5, [pc, #52]	; (8005318 <__libc_init_array+0x38>)
 80052e4:	4c0d      	ldr	r4, [pc, #52]	; (800531c <__libc_init_array+0x3c>)
 80052e6:	1b64      	subs	r4, r4, r5
 80052e8:	10a4      	asrs	r4, r4, #2
 80052ea:	2600      	movs	r6, #0
 80052ec:	42a6      	cmp	r6, r4
 80052ee:	d109      	bne.n	8005304 <__libc_init_array+0x24>
 80052f0:	4d0b      	ldr	r5, [pc, #44]	; (8005320 <__libc_init_array+0x40>)
 80052f2:	4c0c      	ldr	r4, [pc, #48]	; (8005324 <__libc_init_array+0x44>)
 80052f4:	f001 f9ea 	bl	80066cc <_init>
 80052f8:	1b64      	subs	r4, r4, r5
 80052fa:	10a4      	asrs	r4, r4, #2
 80052fc:	2600      	movs	r6, #0
 80052fe:	42a6      	cmp	r6, r4
 8005300:	d105      	bne.n	800530e <__libc_init_array+0x2e>
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	f855 3b04 	ldr.w	r3, [r5], #4
 8005308:	4798      	blx	r3
 800530a:	3601      	adds	r6, #1
 800530c:	e7ee      	b.n	80052ec <__libc_init_array+0xc>
 800530e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005312:	4798      	blx	r3
 8005314:	3601      	adds	r6, #1
 8005316:	e7f2      	b.n	80052fe <__libc_init_array+0x1e>
 8005318:	080067a8 	.word	0x080067a8
 800531c:	080067a8 	.word	0x080067a8
 8005320:	080067a8 	.word	0x080067a8
 8005324:	080067ac 	.word	0x080067ac

08005328 <atan2>:
 8005328:	f000 b982 	b.w	8005630 <__ieee754_atan2>

0800532c <pow>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	ed2d 8b02 	vpush	{d8}
 8005332:	eeb0 8a40 	vmov.f32	s16, s0
 8005336:	eef0 8a60 	vmov.f32	s17, s1
 800533a:	ec55 4b11 	vmov	r4, r5, d1
 800533e:	f000 fa3f 	bl	80057c0 <__ieee754_pow>
 8005342:	4622      	mov	r2, r4
 8005344:	462b      	mov	r3, r5
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	ec57 6b10 	vmov	r6, r7, d0
 800534e:	f7fb fb99 	bl	8000a84 <__aeabi_dcmpun>
 8005352:	2800      	cmp	r0, #0
 8005354:	d13b      	bne.n	80053ce <pow+0xa2>
 8005356:	ec51 0b18 	vmov	r0, r1, d8
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	f7fb fb5f 	bl	8000a20 <__aeabi_dcmpeq>
 8005362:	b1b8      	cbz	r0, 8005394 <pow+0x68>
 8005364:	2200      	movs	r2, #0
 8005366:	2300      	movs	r3, #0
 8005368:	4620      	mov	r0, r4
 800536a:	4629      	mov	r1, r5
 800536c:	f7fb fb58 	bl	8000a20 <__aeabi_dcmpeq>
 8005370:	2800      	cmp	r0, #0
 8005372:	d146      	bne.n	8005402 <pow+0xd6>
 8005374:	ec45 4b10 	vmov	d0, r4, r5
 8005378:	f000 f874 	bl	8005464 <finite>
 800537c:	b338      	cbz	r0, 80053ce <pow+0xa2>
 800537e:	2200      	movs	r2, #0
 8005380:	2300      	movs	r3, #0
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	f7fb fb55 	bl	8000a34 <__aeabi_dcmplt>
 800538a:	b300      	cbz	r0, 80053ce <pow+0xa2>
 800538c:	f7ff ffa2 	bl	80052d4 <__errno>
 8005390:	2322      	movs	r3, #34	; 0x22
 8005392:	e01b      	b.n	80053cc <pow+0xa0>
 8005394:	ec47 6b10 	vmov	d0, r6, r7
 8005398:	f000 f864 	bl	8005464 <finite>
 800539c:	b9e0      	cbnz	r0, 80053d8 <pow+0xac>
 800539e:	eeb0 0a48 	vmov.f32	s0, s16
 80053a2:	eef0 0a68 	vmov.f32	s1, s17
 80053a6:	f000 f85d 	bl	8005464 <finite>
 80053aa:	b1a8      	cbz	r0, 80053d8 <pow+0xac>
 80053ac:	ec45 4b10 	vmov	d0, r4, r5
 80053b0:	f000 f858 	bl	8005464 <finite>
 80053b4:	b180      	cbz	r0, 80053d8 <pow+0xac>
 80053b6:	4632      	mov	r2, r6
 80053b8:	463b      	mov	r3, r7
 80053ba:	4630      	mov	r0, r6
 80053bc:	4639      	mov	r1, r7
 80053be:	f7fb fb61 	bl	8000a84 <__aeabi_dcmpun>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0e2      	beq.n	800538c <pow+0x60>
 80053c6:	f7ff ff85 	bl	80052d4 <__errno>
 80053ca:	2321      	movs	r3, #33	; 0x21
 80053cc:	6003      	str	r3, [r0, #0]
 80053ce:	ecbd 8b02 	vpop	{d8}
 80053d2:	ec47 6b10 	vmov	d0, r6, r7
 80053d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fb fb1e 	bl	8000a20 <__aeabi_dcmpeq>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d0f2      	beq.n	80053ce <pow+0xa2>
 80053e8:	eeb0 0a48 	vmov.f32	s0, s16
 80053ec:	eef0 0a68 	vmov.f32	s1, s17
 80053f0:	f000 f838 	bl	8005464 <finite>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d0ea      	beq.n	80053ce <pow+0xa2>
 80053f8:	ec45 4b10 	vmov	d0, r4, r5
 80053fc:	f000 f832 	bl	8005464 <finite>
 8005400:	e7c3      	b.n	800538a <pow+0x5e>
 8005402:	4f01      	ldr	r7, [pc, #4]	; (8005408 <pow+0xdc>)
 8005404:	2600      	movs	r6, #0
 8005406:	e7e2      	b.n	80053ce <pow+0xa2>
 8005408:	3ff00000 	.word	0x3ff00000

0800540c <sqrt>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	ed2d 8b02 	vpush	{d8}
 8005412:	ec55 4b10 	vmov	r4, r5, d0
 8005416:	f000 f831 	bl	800547c <__ieee754_sqrt>
 800541a:	4622      	mov	r2, r4
 800541c:	462b      	mov	r3, r5
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	eeb0 8a40 	vmov.f32	s16, s0
 8005426:	eef0 8a60 	vmov.f32	s17, s1
 800542a:	f7fb fb2b 	bl	8000a84 <__aeabi_dcmpun>
 800542e:	b990      	cbnz	r0, 8005456 <sqrt+0x4a>
 8005430:	2200      	movs	r2, #0
 8005432:	2300      	movs	r3, #0
 8005434:	4620      	mov	r0, r4
 8005436:	4629      	mov	r1, r5
 8005438:	f7fb fafc 	bl	8000a34 <__aeabi_dcmplt>
 800543c:	b158      	cbz	r0, 8005456 <sqrt+0x4a>
 800543e:	f7ff ff49 	bl	80052d4 <__errno>
 8005442:	2321      	movs	r3, #33	; 0x21
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	2300      	movs	r3, #0
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	f7fb f9a9 	bl	80007a4 <__aeabi_ddiv>
 8005452:	ec41 0b18 	vmov	d8, r0, r1
 8005456:	eeb0 0a48 	vmov.f32	s0, s16
 800545a:	eef0 0a68 	vmov.f32	s1, s17
 800545e:	ecbd 8b02 	vpop	{d8}
 8005462:	bd38      	pop	{r3, r4, r5, pc}

08005464 <finite>:
 8005464:	b082      	sub	sp, #8
 8005466:	ed8d 0b00 	vstr	d0, [sp]
 800546a:	9801      	ldr	r0, [sp, #4]
 800546c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005470:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005474:	0fc0      	lsrs	r0, r0, #31
 8005476:	b002      	add	sp, #8
 8005478:	4770      	bx	lr
	...

0800547c <__ieee754_sqrt>:
 800547c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	ec55 4b10 	vmov	r4, r5, d0
 8005484:	4e67      	ldr	r6, [pc, #412]	; (8005624 <__ieee754_sqrt+0x1a8>)
 8005486:	43ae      	bics	r6, r5
 8005488:	ee10 0a10 	vmov	r0, s0
 800548c:	ee10 2a10 	vmov	r2, s0
 8005490:	4629      	mov	r1, r5
 8005492:	462b      	mov	r3, r5
 8005494:	d10d      	bne.n	80054b2 <__ieee754_sqrt+0x36>
 8005496:	f7fb f85b 	bl	8000550 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fa fe9f 	bl	80001e4 <__adddf3>
 80054a6:	4604      	mov	r4, r0
 80054a8:	460d      	mov	r5, r1
 80054aa:	ec45 4b10 	vmov	d0, r4, r5
 80054ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b2:	2d00      	cmp	r5, #0
 80054b4:	dc0b      	bgt.n	80054ce <__ieee754_sqrt+0x52>
 80054b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80054ba:	4326      	orrs	r6, r4
 80054bc:	d0f5      	beq.n	80054aa <__ieee754_sqrt+0x2e>
 80054be:	b135      	cbz	r5, 80054ce <__ieee754_sqrt+0x52>
 80054c0:	f7fa fe8e 	bl	80001e0 <__aeabi_dsub>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	f7fb f96c 	bl	80007a4 <__aeabi_ddiv>
 80054cc:	e7eb      	b.n	80054a6 <__ieee754_sqrt+0x2a>
 80054ce:	1509      	asrs	r1, r1, #20
 80054d0:	f000 808d 	beq.w	80055ee <__ieee754_sqrt+0x172>
 80054d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80054dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e0:	07c9      	lsls	r1, r1, #31
 80054e2:	bf5c      	itt	pl
 80054e4:	005b      	lslpl	r3, r3, #1
 80054e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80054ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054ee:	bf58      	it	pl
 80054f0:	0052      	lslpl	r2, r2, #1
 80054f2:	2500      	movs	r5, #0
 80054f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80054f8:	1076      	asrs	r6, r6, #1
 80054fa:	0052      	lsls	r2, r2, #1
 80054fc:	f04f 0e16 	mov.w	lr, #22
 8005500:	46ac      	mov	ip, r5
 8005502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005506:	eb0c 0001 	add.w	r0, ip, r1
 800550a:	4298      	cmp	r0, r3
 800550c:	bfde      	ittt	le
 800550e:	1a1b      	suble	r3, r3, r0
 8005510:	eb00 0c01 	addle.w	ip, r0, r1
 8005514:	186d      	addle	r5, r5, r1
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	f1be 0e01 	subs.w	lr, lr, #1
 800551c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005520:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005524:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005528:	d1ed      	bne.n	8005506 <__ieee754_sqrt+0x8a>
 800552a:	4674      	mov	r4, lr
 800552c:	2720      	movs	r7, #32
 800552e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005532:	4563      	cmp	r3, ip
 8005534:	eb01 000e 	add.w	r0, r1, lr
 8005538:	dc02      	bgt.n	8005540 <__ieee754_sqrt+0xc4>
 800553a:	d113      	bne.n	8005564 <__ieee754_sqrt+0xe8>
 800553c:	4290      	cmp	r0, r2
 800553e:	d811      	bhi.n	8005564 <__ieee754_sqrt+0xe8>
 8005540:	2800      	cmp	r0, #0
 8005542:	eb00 0e01 	add.w	lr, r0, r1
 8005546:	da57      	bge.n	80055f8 <__ieee754_sqrt+0x17c>
 8005548:	f1be 0f00 	cmp.w	lr, #0
 800554c:	db54      	blt.n	80055f8 <__ieee754_sqrt+0x17c>
 800554e:	f10c 0801 	add.w	r8, ip, #1
 8005552:	eba3 030c 	sub.w	r3, r3, ip
 8005556:	4290      	cmp	r0, r2
 8005558:	bf88      	it	hi
 800555a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800555e:	1a12      	subs	r2, r2, r0
 8005560:	440c      	add	r4, r1
 8005562:	46c4      	mov	ip, r8
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	3f01      	subs	r7, #1
 8005568:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800556c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005570:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005574:	d1dd      	bne.n	8005532 <__ieee754_sqrt+0xb6>
 8005576:	4313      	orrs	r3, r2
 8005578:	d01b      	beq.n	80055b2 <__ieee754_sqrt+0x136>
 800557a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005628 <__ieee754_sqrt+0x1ac>
 800557e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800562c <__ieee754_sqrt+0x1b0>
 8005582:	e9da 0100 	ldrd	r0, r1, [sl]
 8005586:	e9db 2300 	ldrd	r2, r3, [fp]
 800558a:	f7fa fe29 	bl	80001e0 <__aeabi_dsub>
 800558e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4640      	mov	r0, r8
 8005598:	4649      	mov	r1, r9
 800559a:	f7fb fa55 	bl	8000a48 <__aeabi_dcmple>
 800559e:	b140      	cbz	r0, 80055b2 <__ieee754_sqrt+0x136>
 80055a0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80055a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80055a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80055ac:	d126      	bne.n	80055fc <__ieee754_sqrt+0x180>
 80055ae:	3501      	adds	r5, #1
 80055b0:	463c      	mov	r4, r7
 80055b2:	106a      	asrs	r2, r5, #1
 80055b4:	0863      	lsrs	r3, r4, #1
 80055b6:	07e9      	lsls	r1, r5, #31
 80055b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80055bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80055c0:	bf48      	it	mi
 80055c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80055c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80055ca:	461c      	mov	r4, r3
 80055cc:	e76d      	b.n	80054aa <__ieee754_sqrt+0x2e>
 80055ce:	0ad3      	lsrs	r3, r2, #11
 80055d0:	3815      	subs	r0, #21
 80055d2:	0552      	lsls	r2, r2, #21
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0fa      	beq.n	80055ce <__ieee754_sqrt+0x152>
 80055d8:	02dc      	lsls	r4, r3, #11
 80055da:	d50a      	bpl.n	80055f2 <__ieee754_sqrt+0x176>
 80055dc:	f1c1 0420 	rsb	r4, r1, #32
 80055e0:	fa22 f404 	lsr.w	r4, r2, r4
 80055e4:	1e4d      	subs	r5, r1, #1
 80055e6:	408a      	lsls	r2, r1
 80055e8:	4323      	orrs	r3, r4
 80055ea:	1b41      	subs	r1, r0, r5
 80055ec:	e772      	b.n	80054d4 <__ieee754_sqrt+0x58>
 80055ee:	4608      	mov	r0, r1
 80055f0:	e7f0      	b.n	80055d4 <__ieee754_sqrt+0x158>
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	3101      	adds	r1, #1
 80055f6:	e7ef      	b.n	80055d8 <__ieee754_sqrt+0x15c>
 80055f8:	46e0      	mov	r8, ip
 80055fa:	e7aa      	b.n	8005552 <__ieee754_sqrt+0xd6>
 80055fc:	f7fa fdf2 	bl	80001e4 <__adddf3>
 8005600:	e9da 8900 	ldrd	r8, r9, [sl]
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	f7fb fa12 	bl	8000a34 <__aeabi_dcmplt>
 8005610:	b120      	cbz	r0, 800561c <__ieee754_sqrt+0x1a0>
 8005612:	1ca0      	adds	r0, r4, #2
 8005614:	bf08      	it	eq
 8005616:	3501      	addeq	r5, #1
 8005618:	3402      	adds	r4, #2
 800561a:	e7ca      	b.n	80055b2 <__ieee754_sqrt+0x136>
 800561c:	3401      	adds	r4, #1
 800561e:	f024 0401 	bic.w	r4, r4, #1
 8005622:	e7c6      	b.n	80055b2 <__ieee754_sqrt+0x136>
 8005624:	7ff00000 	.word	0x7ff00000
 8005628:	20000060 	.word	0x20000060
 800562c:	20000068 	.word	0x20000068

08005630 <__ieee754_atan2>:
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005634:	ec57 6b11 	vmov	r6, r7, d1
 8005638:	4273      	negs	r3, r6
 800563a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80057b8 <__ieee754_atan2+0x188>
 800563e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005642:	4333      	orrs	r3, r6
 8005644:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005648:	4543      	cmp	r3, r8
 800564a:	ec51 0b10 	vmov	r0, r1, d0
 800564e:	ee11 5a10 	vmov	r5, s2
 8005652:	d80a      	bhi.n	800566a <__ieee754_atan2+0x3a>
 8005654:	4244      	negs	r4, r0
 8005656:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800565a:	4304      	orrs	r4, r0
 800565c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005660:	4544      	cmp	r4, r8
 8005662:	ee10 9a10 	vmov	r9, s0
 8005666:	468e      	mov	lr, r1
 8005668:	d907      	bls.n	800567a <__ieee754_atan2+0x4a>
 800566a:	4632      	mov	r2, r6
 800566c:	463b      	mov	r3, r7
 800566e:	f7fa fdb9 	bl	80001e4 <__adddf3>
 8005672:	ec41 0b10 	vmov	d0, r0, r1
 8005676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800567a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800567e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005682:	4334      	orrs	r4, r6
 8005684:	d103      	bne.n	800568e <__ieee754_atan2+0x5e>
 8005686:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800568a:	f000 bdc5 	b.w	8006218 <atan>
 800568e:	17bc      	asrs	r4, r7, #30
 8005690:	f004 0402 	and.w	r4, r4, #2
 8005694:	ea53 0909 	orrs.w	r9, r3, r9
 8005698:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800569c:	d107      	bne.n	80056ae <__ieee754_atan2+0x7e>
 800569e:	2c02      	cmp	r4, #2
 80056a0:	d05f      	beq.n	8005762 <__ieee754_atan2+0x132>
 80056a2:	2c03      	cmp	r4, #3
 80056a4:	d1e5      	bne.n	8005672 <__ieee754_atan2+0x42>
 80056a6:	a140      	add	r1, pc, #256	; (adr r1, 80057a8 <__ieee754_atan2+0x178>)
 80056a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ac:	e7e1      	b.n	8005672 <__ieee754_atan2+0x42>
 80056ae:	4315      	orrs	r5, r2
 80056b0:	d106      	bne.n	80056c0 <__ieee754_atan2+0x90>
 80056b2:	f1be 0f00 	cmp.w	lr, #0
 80056b6:	da5f      	bge.n	8005778 <__ieee754_atan2+0x148>
 80056b8:	a13d      	add	r1, pc, #244	; (adr r1, 80057b0 <__ieee754_atan2+0x180>)
 80056ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056be:	e7d8      	b.n	8005672 <__ieee754_atan2+0x42>
 80056c0:	4542      	cmp	r2, r8
 80056c2:	d10f      	bne.n	80056e4 <__ieee754_atan2+0xb4>
 80056c4:	4293      	cmp	r3, r2
 80056c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80056ca:	d107      	bne.n	80056dc <__ieee754_atan2+0xac>
 80056cc:	2c02      	cmp	r4, #2
 80056ce:	d84c      	bhi.n	800576a <__ieee754_atan2+0x13a>
 80056d0:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <__ieee754_atan2+0x170>)
 80056d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056da:	e7ca      	b.n	8005672 <__ieee754_atan2+0x42>
 80056dc:	2c02      	cmp	r4, #2
 80056de:	d848      	bhi.n	8005772 <__ieee754_atan2+0x142>
 80056e0:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <__ieee754_atan2+0x174>)
 80056e2:	e7f6      	b.n	80056d2 <__ieee754_atan2+0xa2>
 80056e4:	4543      	cmp	r3, r8
 80056e6:	d0e4      	beq.n	80056b2 <__ieee754_atan2+0x82>
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80056ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80056f2:	da1e      	bge.n	8005732 <__ieee754_atan2+0x102>
 80056f4:	2f00      	cmp	r7, #0
 80056f6:	da01      	bge.n	80056fc <__ieee754_atan2+0xcc>
 80056f8:	323c      	adds	r2, #60	; 0x3c
 80056fa:	db1e      	blt.n	800573a <__ieee754_atan2+0x10a>
 80056fc:	4632      	mov	r2, r6
 80056fe:	463b      	mov	r3, r7
 8005700:	f7fb f850 	bl	80007a4 <__aeabi_ddiv>
 8005704:	ec41 0b10 	vmov	d0, r0, r1
 8005708:	f000 ff26 	bl	8006558 <fabs>
 800570c:	f000 fd84 	bl	8006218 <atan>
 8005710:	ec51 0b10 	vmov	r0, r1, d0
 8005714:	2c01      	cmp	r4, #1
 8005716:	d013      	beq.n	8005740 <__ieee754_atan2+0x110>
 8005718:	2c02      	cmp	r4, #2
 800571a:	d015      	beq.n	8005748 <__ieee754_atan2+0x118>
 800571c:	2c00      	cmp	r4, #0
 800571e:	d0a8      	beq.n	8005672 <__ieee754_atan2+0x42>
 8005720:	a317      	add	r3, pc, #92	; (adr r3, 8005780 <__ieee754_atan2+0x150>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa fd5b 	bl	80001e0 <__aeabi_dsub>
 800572a:	a317      	add	r3, pc, #92	; (adr r3, 8005788 <__ieee754_atan2+0x158>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	e014      	b.n	800575c <__ieee754_atan2+0x12c>
 8005732:	a117      	add	r1, pc, #92	; (adr r1, 8005790 <__ieee754_atan2+0x160>)
 8005734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005738:	e7ec      	b.n	8005714 <__ieee754_atan2+0xe4>
 800573a:	2000      	movs	r0, #0
 800573c:	2100      	movs	r1, #0
 800573e:	e7e9      	b.n	8005714 <__ieee754_atan2+0xe4>
 8005740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005744:	4619      	mov	r1, r3
 8005746:	e794      	b.n	8005672 <__ieee754_atan2+0x42>
 8005748:	a30d      	add	r3, pc, #52	; (adr r3, 8005780 <__ieee754_atan2+0x150>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fa fd47 	bl	80001e0 <__aeabi_dsub>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	a10c      	add	r1, pc, #48	; (adr r1, 8005788 <__ieee754_atan2+0x158>)
 8005758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800575c:	f7fa fd40 	bl	80001e0 <__aeabi_dsub>
 8005760:	e787      	b.n	8005672 <__ieee754_atan2+0x42>
 8005762:	a109      	add	r1, pc, #36	; (adr r1, 8005788 <__ieee754_atan2+0x158>)
 8005764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005768:	e783      	b.n	8005672 <__ieee754_atan2+0x42>
 800576a:	a10b      	add	r1, pc, #44	; (adr r1, 8005798 <__ieee754_atan2+0x168>)
 800576c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005770:	e77f      	b.n	8005672 <__ieee754_atan2+0x42>
 8005772:	2000      	movs	r0, #0
 8005774:	2100      	movs	r1, #0
 8005776:	e77c      	b.n	8005672 <__ieee754_atan2+0x42>
 8005778:	a105      	add	r1, pc, #20	; (adr r1, 8005790 <__ieee754_atan2+0x160>)
 800577a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800577e:	e778      	b.n	8005672 <__ieee754_atan2+0x42>
 8005780:	33145c07 	.word	0x33145c07
 8005784:	3ca1a626 	.word	0x3ca1a626
 8005788:	54442d18 	.word	0x54442d18
 800578c:	400921fb 	.word	0x400921fb
 8005790:	54442d18 	.word	0x54442d18
 8005794:	3ff921fb 	.word	0x3ff921fb
 8005798:	54442d18 	.word	0x54442d18
 800579c:	3fe921fb 	.word	0x3fe921fb
 80057a0:	08006700 	.word	0x08006700
 80057a4:	08006718 	.word	0x08006718
 80057a8:	54442d18 	.word	0x54442d18
 80057ac:	c00921fb 	.word	0xc00921fb
 80057b0:	54442d18 	.word	0x54442d18
 80057b4:	bff921fb 	.word	0xbff921fb
 80057b8:	7ff00000 	.word	0x7ff00000
 80057bc:	00000000 	.word	0x00000000

080057c0 <__ieee754_pow>:
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	ed2d 8b06 	vpush	{d8-d10}
 80057c8:	b089      	sub	sp, #36	; 0x24
 80057ca:	ed8d 1b00 	vstr	d1, [sp]
 80057ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 80057d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80057d6:	ea58 0102 	orrs.w	r1, r8, r2
 80057da:	ec57 6b10 	vmov	r6, r7, d0
 80057de:	d115      	bne.n	800580c <__ieee754_pow+0x4c>
 80057e0:	19b3      	adds	r3, r6, r6
 80057e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80057e6:	4152      	adcs	r2, r2
 80057e8:	4299      	cmp	r1, r3
 80057ea:	4b89      	ldr	r3, [pc, #548]	; (8005a10 <__ieee754_pow+0x250>)
 80057ec:	4193      	sbcs	r3, r2
 80057ee:	f080 84d1 	bcs.w	8006194 <__ieee754_pow+0x9d4>
 80057f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057f6:	4630      	mov	r0, r6
 80057f8:	4639      	mov	r1, r7
 80057fa:	f7fa fcf3 	bl	80001e4 <__adddf3>
 80057fe:	ec41 0b10 	vmov	d0, r0, r1
 8005802:	b009      	add	sp, #36	; 0x24
 8005804:	ecbd 8b06 	vpop	{d8-d10}
 8005808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580c:	4b81      	ldr	r3, [pc, #516]	; (8005a14 <__ieee754_pow+0x254>)
 800580e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005812:	429c      	cmp	r4, r3
 8005814:	ee10 aa10 	vmov	sl, s0
 8005818:	463d      	mov	r5, r7
 800581a:	dc06      	bgt.n	800582a <__ieee754_pow+0x6a>
 800581c:	d101      	bne.n	8005822 <__ieee754_pow+0x62>
 800581e:	2e00      	cmp	r6, #0
 8005820:	d1e7      	bne.n	80057f2 <__ieee754_pow+0x32>
 8005822:	4598      	cmp	r8, r3
 8005824:	dc01      	bgt.n	800582a <__ieee754_pow+0x6a>
 8005826:	d10f      	bne.n	8005848 <__ieee754_pow+0x88>
 8005828:	b172      	cbz	r2, 8005848 <__ieee754_pow+0x88>
 800582a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800582e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005832:	ea55 050a 	orrs.w	r5, r5, sl
 8005836:	d1dc      	bne.n	80057f2 <__ieee754_pow+0x32>
 8005838:	e9dd 3200 	ldrd	r3, r2, [sp]
 800583c:	18db      	adds	r3, r3, r3
 800583e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005842:	4152      	adcs	r2, r2
 8005844:	429d      	cmp	r5, r3
 8005846:	e7d0      	b.n	80057ea <__ieee754_pow+0x2a>
 8005848:	2d00      	cmp	r5, #0
 800584a:	da3b      	bge.n	80058c4 <__ieee754_pow+0x104>
 800584c:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <__ieee754_pow+0x258>)
 800584e:	4598      	cmp	r8, r3
 8005850:	dc51      	bgt.n	80058f6 <__ieee754_pow+0x136>
 8005852:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005856:	4598      	cmp	r8, r3
 8005858:	f340 84ab 	ble.w	80061b2 <__ieee754_pow+0x9f2>
 800585c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005860:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005864:	2b14      	cmp	r3, #20
 8005866:	dd0f      	ble.n	8005888 <__ieee754_pow+0xc8>
 8005868:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800586c:	fa22 f103 	lsr.w	r1, r2, r3
 8005870:	fa01 f303 	lsl.w	r3, r1, r3
 8005874:	4293      	cmp	r3, r2
 8005876:	f040 849c 	bne.w	80061b2 <__ieee754_pow+0x9f2>
 800587a:	f001 0101 	and.w	r1, r1, #1
 800587e:	f1c1 0302 	rsb	r3, r1, #2
 8005882:	9304      	str	r3, [sp, #16]
 8005884:	b182      	cbz	r2, 80058a8 <__ieee754_pow+0xe8>
 8005886:	e05f      	b.n	8005948 <__ieee754_pow+0x188>
 8005888:	2a00      	cmp	r2, #0
 800588a:	d15b      	bne.n	8005944 <__ieee754_pow+0x184>
 800588c:	f1c3 0314 	rsb	r3, r3, #20
 8005890:	fa48 f103 	asr.w	r1, r8, r3
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	4543      	cmp	r3, r8
 800589a:	f040 8487 	bne.w	80061ac <__ieee754_pow+0x9ec>
 800589e:	f001 0101 	and.w	r1, r1, #1
 80058a2:	f1c1 0302 	rsb	r3, r1, #2
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	4b5c      	ldr	r3, [pc, #368]	; (8005a1c <__ieee754_pow+0x25c>)
 80058aa:	4598      	cmp	r8, r3
 80058ac:	d132      	bne.n	8005914 <__ieee754_pow+0x154>
 80058ae:	f1b9 0f00 	cmp.w	r9, #0
 80058b2:	f280 8477 	bge.w	80061a4 <__ieee754_pow+0x9e4>
 80058b6:	4959      	ldr	r1, [pc, #356]	; (8005a1c <__ieee754_pow+0x25c>)
 80058b8:	4632      	mov	r2, r6
 80058ba:	463b      	mov	r3, r7
 80058bc:	2000      	movs	r0, #0
 80058be:	f7fa ff71 	bl	80007a4 <__aeabi_ddiv>
 80058c2:	e79c      	b.n	80057fe <__ieee754_pow+0x3e>
 80058c4:	2300      	movs	r3, #0
 80058c6:	9304      	str	r3, [sp, #16]
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d13d      	bne.n	8005948 <__ieee754_pow+0x188>
 80058cc:	4b51      	ldr	r3, [pc, #324]	; (8005a14 <__ieee754_pow+0x254>)
 80058ce:	4598      	cmp	r8, r3
 80058d0:	d1ea      	bne.n	80058a8 <__ieee754_pow+0xe8>
 80058d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80058d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80058da:	ea53 030a 	orrs.w	r3, r3, sl
 80058de:	f000 8459 	beq.w	8006194 <__ieee754_pow+0x9d4>
 80058e2:	4b4f      	ldr	r3, [pc, #316]	; (8005a20 <__ieee754_pow+0x260>)
 80058e4:	429c      	cmp	r4, r3
 80058e6:	dd08      	ble.n	80058fa <__ieee754_pow+0x13a>
 80058e8:	f1b9 0f00 	cmp.w	r9, #0
 80058ec:	f2c0 8456 	blt.w	800619c <__ieee754_pow+0x9dc>
 80058f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f4:	e783      	b.n	80057fe <__ieee754_pow+0x3e>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e7e5      	b.n	80058c6 <__ieee754_pow+0x106>
 80058fa:	f1b9 0f00 	cmp.w	r9, #0
 80058fe:	f04f 0000 	mov.w	r0, #0
 8005902:	f04f 0100 	mov.w	r1, #0
 8005906:	f6bf af7a 	bge.w	80057fe <__ieee754_pow+0x3e>
 800590a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800590e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005912:	e774      	b.n	80057fe <__ieee754_pow+0x3e>
 8005914:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005918:	d106      	bne.n	8005928 <__ieee754_pow+0x168>
 800591a:	4632      	mov	r2, r6
 800591c:	463b      	mov	r3, r7
 800591e:	4630      	mov	r0, r6
 8005920:	4639      	mov	r1, r7
 8005922:	f7fa fe15 	bl	8000550 <__aeabi_dmul>
 8005926:	e76a      	b.n	80057fe <__ieee754_pow+0x3e>
 8005928:	4b3e      	ldr	r3, [pc, #248]	; (8005a24 <__ieee754_pow+0x264>)
 800592a:	4599      	cmp	r9, r3
 800592c:	d10c      	bne.n	8005948 <__ieee754_pow+0x188>
 800592e:	2d00      	cmp	r5, #0
 8005930:	db0a      	blt.n	8005948 <__ieee754_pow+0x188>
 8005932:	ec47 6b10 	vmov	d0, r6, r7
 8005936:	b009      	add	sp, #36	; 0x24
 8005938:	ecbd 8b06 	vpop	{d8-d10}
 800593c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005940:	f7ff bd9c 	b.w	800547c <__ieee754_sqrt>
 8005944:	2300      	movs	r3, #0
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	ec47 6b10 	vmov	d0, r6, r7
 800594c:	f000 fe04 	bl	8006558 <fabs>
 8005950:	ec51 0b10 	vmov	r0, r1, d0
 8005954:	f1ba 0f00 	cmp.w	sl, #0
 8005958:	d129      	bne.n	80059ae <__ieee754_pow+0x1ee>
 800595a:	b124      	cbz	r4, 8005966 <__ieee754_pow+0x1a6>
 800595c:	4b2f      	ldr	r3, [pc, #188]	; (8005a1c <__ieee754_pow+0x25c>)
 800595e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005962:	429a      	cmp	r2, r3
 8005964:	d123      	bne.n	80059ae <__ieee754_pow+0x1ee>
 8005966:	f1b9 0f00 	cmp.w	r9, #0
 800596a:	da05      	bge.n	8005978 <__ieee754_pow+0x1b8>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	2000      	movs	r0, #0
 8005972:	492a      	ldr	r1, [pc, #168]	; (8005a1c <__ieee754_pow+0x25c>)
 8005974:	f7fa ff16 	bl	80007a4 <__aeabi_ddiv>
 8005978:	2d00      	cmp	r5, #0
 800597a:	f6bf af40 	bge.w	80057fe <__ieee754_pow+0x3e>
 800597e:	9b04      	ldr	r3, [sp, #16]
 8005980:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005984:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005988:	431c      	orrs	r4, r3
 800598a:	d108      	bne.n	800599e <__ieee754_pow+0x1de>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	f7fa fc24 	bl	80001e0 <__aeabi_dsub>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	e78f      	b.n	80058be <__ieee754_pow+0xfe>
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	f47f af2c 	bne.w	80057fe <__ieee754_pow+0x3e>
 80059a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059aa:	4619      	mov	r1, r3
 80059ac:	e727      	b.n	80057fe <__ieee754_pow+0x3e>
 80059ae:	0feb      	lsrs	r3, r5, #31
 80059b0:	3b01      	subs	r3, #1
 80059b2:	9306      	str	r3, [sp, #24]
 80059b4:	9a06      	ldr	r2, [sp, #24]
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	d102      	bne.n	80059c2 <__ieee754_pow+0x202>
 80059bc:	4632      	mov	r2, r6
 80059be:	463b      	mov	r3, r7
 80059c0:	e7e6      	b.n	8005990 <__ieee754_pow+0x1d0>
 80059c2:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <__ieee754_pow+0x268>)
 80059c4:	4598      	cmp	r8, r3
 80059c6:	f340 80fb 	ble.w	8005bc0 <__ieee754_pow+0x400>
 80059ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80059ce:	4598      	cmp	r8, r3
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <__ieee754_pow+0x260>)
 80059d2:	dd0c      	ble.n	80059ee <__ieee754_pow+0x22e>
 80059d4:	429c      	cmp	r4, r3
 80059d6:	dc0f      	bgt.n	80059f8 <__ieee754_pow+0x238>
 80059d8:	f1b9 0f00 	cmp.w	r9, #0
 80059dc:	da0f      	bge.n	80059fe <__ieee754_pow+0x23e>
 80059de:	2000      	movs	r0, #0
 80059e0:	b009      	add	sp, #36	; 0x24
 80059e2:	ecbd 8b06 	vpop	{d8-d10}
 80059e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f000 be66 	b.w	80066ba <__math_oflow>
 80059ee:	429c      	cmp	r4, r3
 80059f0:	dbf2      	blt.n	80059d8 <__ieee754_pow+0x218>
 80059f2:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <__ieee754_pow+0x25c>)
 80059f4:	429c      	cmp	r4, r3
 80059f6:	dd19      	ble.n	8005a2c <__ieee754_pow+0x26c>
 80059f8:	f1b9 0f00 	cmp.w	r9, #0
 80059fc:	dcef      	bgt.n	80059de <__ieee754_pow+0x21e>
 80059fe:	2000      	movs	r0, #0
 8005a00:	b009      	add	sp, #36	; 0x24
 8005a02:	ecbd 8b06 	vpop	{d8-d10}
 8005a06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	f000 be4d 	b.w	80066a8 <__math_uflow>
 8005a0e:	bf00      	nop
 8005a10:	fff00000 	.word	0xfff00000
 8005a14:	7ff00000 	.word	0x7ff00000
 8005a18:	433fffff 	.word	0x433fffff
 8005a1c:	3ff00000 	.word	0x3ff00000
 8005a20:	3fefffff 	.word	0x3fefffff
 8005a24:	3fe00000 	.word	0x3fe00000
 8005a28:	41e00000 	.word	0x41e00000
 8005a2c:	4b60      	ldr	r3, [pc, #384]	; (8005bb0 <__ieee754_pow+0x3f0>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f7fa fbd6 	bl	80001e0 <__aeabi_dsub>
 8005a34:	a354      	add	r3, pc, #336	; (adr r3, 8005b88 <__ieee754_pow+0x3c8>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	f7fa fd87 	bl	8000550 <__aeabi_dmul>
 8005a42:	a353      	add	r3, pc, #332	; (adr r3, 8005b90 <__ieee754_pow+0x3d0>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	4606      	mov	r6, r0
 8005a4a:	460f      	mov	r7, r1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fd7e 	bl	8000550 <__aeabi_dmul>
 8005a54:	4b57      	ldr	r3, [pc, #348]	; (8005bb4 <__ieee754_pow+0x3f4>)
 8005a56:	4682      	mov	sl, r0
 8005a58:	468b      	mov	fp, r1
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f7fa fd76 	bl	8000550 <__aeabi_dmul>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	a14b      	add	r1, pc, #300	; (adr r1, 8005b98 <__ieee754_pow+0x3d8>)
 8005a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a6e:	f7fa fbb7 	bl	80001e0 <__aeabi_dsub>
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	f7fa fd6b 	bl	8000550 <__aeabi_dmul>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	2000      	movs	r0, #0
 8005a80:	494d      	ldr	r1, [pc, #308]	; (8005bb8 <__ieee754_pow+0x3f8>)
 8005a82:	f7fa fbad 	bl	80001e0 <__aeabi_dsub>
 8005a86:	4622      	mov	r2, r4
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fa fd5d 	bl	8000550 <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fa fd57 	bl	8000550 <__aeabi_dmul>
 8005aa2:	a33f      	add	r3, pc, #252	; (adr r3, 8005ba0 <__ieee754_pow+0x3e0>)
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f7fa fd52 	bl	8000550 <__aeabi_dmul>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4650      	mov	r0, sl
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	f7fa fb94 	bl	80001e0 <__aeabi_dsub>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4680      	mov	r8, r0
 8005abe:	4689      	mov	r9, r1
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa fb8e 	bl	80001e4 <__adddf3>
 8005ac8:	2000      	movs	r0, #0
 8005aca:	4632      	mov	r2, r6
 8005acc:	463b      	mov	r3, r7
 8005ace:	4604      	mov	r4, r0
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	f7fa fb85 	bl	80001e0 <__aeabi_dsub>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa fb7f 	bl	80001e0 <__aeabi_dsub>
 8005ae2:	9b04      	ldr	r3, [sp, #16]
 8005ae4:	9a06      	ldr	r2, [sp, #24]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	4682      	mov	sl, r0
 8005aec:	468b      	mov	fp, r1
 8005aee:	f040 81e7 	bne.w	8005ec0 <__ieee754_pow+0x700>
 8005af2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005ba8 <__ieee754_pow+0x3e8>
 8005af6:	eeb0 8a47 	vmov.f32	s16, s14
 8005afa:	eef0 8a67 	vmov.f32	s17, s15
 8005afe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b02:	2600      	movs	r6, #0
 8005b04:	4632      	mov	r2, r6
 8005b06:	463b      	mov	r3, r7
 8005b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b0c:	f7fa fb68 	bl	80001e0 <__aeabi_dsub>
 8005b10:	4622      	mov	r2, r4
 8005b12:	462b      	mov	r3, r5
 8005b14:	f7fa fd1c 	bl	8000550 <__aeabi_dmul>
 8005b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1c:	4680      	mov	r8, r0
 8005b1e:	4689      	mov	r9, r1
 8005b20:	4650      	mov	r0, sl
 8005b22:	4659      	mov	r1, fp
 8005b24:	f7fa fd14 	bl	8000550 <__aeabi_dmul>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	4649      	mov	r1, r9
 8005b30:	f7fa fb58 	bl	80001e4 <__adddf3>
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4680      	mov	r8, r0
 8005b3a:	4689      	mov	r9, r1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa fd06 	bl	8000550 <__aeabi_dmul>
 8005b44:	460b      	mov	r3, r1
 8005b46:	4604      	mov	r4, r0
 8005b48:	460d      	mov	r5, r1
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7fa fb48 	bl	80001e4 <__adddf3>
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <__ieee754_pow+0x3fc>)
 8005b56:	4299      	cmp	r1, r3
 8005b58:	ec45 4b19 	vmov	d9, r4, r5
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460f      	mov	r7, r1
 8005b60:	468b      	mov	fp, r1
 8005b62:	f340 82f0 	ble.w	8006146 <__ieee754_pow+0x986>
 8005b66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005b6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005b6e:	4303      	orrs	r3, r0
 8005b70:	f000 81e4 	beq.w	8005f3c <__ieee754_pow+0x77c>
 8005b74:	ec51 0b18 	vmov	r0, r1, d8
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f7fa ff5a 	bl	8000a34 <__aeabi_dcmplt>
 8005b80:	3800      	subs	r0, #0
 8005b82:	bf18      	it	ne
 8005b84:	2001      	movne	r0, #1
 8005b86:	e72b      	b.n	80059e0 <__ieee754_pow+0x220>
 8005b88:	60000000 	.word	0x60000000
 8005b8c:	3ff71547 	.word	0x3ff71547
 8005b90:	f85ddf44 	.word	0xf85ddf44
 8005b94:	3e54ae0b 	.word	0x3e54ae0b
 8005b98:	55555555 	.word	0x55555555
 8005b9c:	3fd55555 	.word	0x3fd55555
 8005ba0:	652b82fe 	.word	0x652b82fe
 8005ba4:	3ff71547 	.word	0x3ff71547
 8005ba8:	00000000 	.word	0x00000000
 8005bac:	bff00000 	.word	0xbff00000
 8005bb0:	3ff00000 	.word	0x3ff00000
 8005bb4:	3fd00000 	.word	0x3fd00000
 8005bb8:	3fe00000 	.word	0x3fe00000
 8005bbc:	408fffff 	.word	0x408fffff
 8005bc0:	4bd5      	ldr	r3, [pc, #852]	; (8005f18 <__ieee754_pow+0x758>)
 8005bc2:	402b      	ands	r3, r5
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	b92b      	cbnz	r3, 8005bd4 <__ieee754_pow+0x414>
 8005bc8:	4bd4      	ldr	r3, [pc, #848]	; (8005f1c <__ieee754_pow+0x75c>)
 8005bca:	f7fa fcc1 	bl	8000550 <__aeabi_dmul>
 8005bce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	1523      	asrs	r3, r4, #20
 8005bd6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005bda:	4413      	add	r3, r2
 8005bdc:	9305      	str	r3, [sp, #20]
 8005bde:	4bd0      	ldr	r3, [pc, #832]	; (8005f20 <__ieee754_pow+0x760>)
 8005be0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005be4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005be8:	429c      	cmp	r4, r3
 8005bea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005bee:	dd08      	ble.n	8005c02 <__ieee754_pow+0x442>
 8005bf0:	4bcc      	ldr	r3, [pc, #816]	; (8005f24 <__ieee754_pow+0x764>)
 8005bf2:	429c      	cmp	r4, r3
 8005bf4:	f340 8162 	ble.w	8005ebc <__ieee754_pow+0x6fc>
 8005bf8:	9b05      	ldr	r3, [sp, #20]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005c02:	2400      	movs	r4, #0
 8005c04:	00e3      	lsls	r3, r4, #3
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	4bc7      	ldr	r3, [pc, #796]	; (8005f28 <__ieee754_pow+0x768>)
 8005c0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c0e:	ed93 7b00 	vldr	d7, [r3]
 8005c12:	4629      	mov	r1, r5
 8005c14:	ec53 2b17 	vmov	r2, r3, d7
 8005c18:	eeb0 9a47 	vmov.f32	s18, s14
 8005c1c:	eef0 9a67 	vmov.f32	s19, s15
 8005c20:	4682      	mov	sl, r0
 8005c22:	f7fa fadd 	bl	80001e0 <__aeabi_dsub>
 8005c26:	4652      	mov	r2, sl
 8005c28:	4606      	mov	r6, r0
 8005c2a:	460f      	mov	r7, r1
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	ec51 0b19 	vmov	r0, r1, d9
 8005c32:	f7fa fad7 	bl	80001e4 <__adddf3>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	49bb      	ldr	r1, [pc, #748]	; (8005f2c <__ieee754_pow+0x76c>)
 8005c3e:	f7fa fdb1 	bl	80007a4 <__aeabi_ddiv>
 8005c42:	ec41 0b1a 	vmov	d10, r0, r1
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	f7fa fc7f 	bl	8000550 <__aeabi_dmul>
 8005c52:	2300      	movs	r3, #0
 8005c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005c5e:	46ab      	mov	fp, r5
 8005c60:	106d      	asrs	r5, r5, #1
 8005c62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005c66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005c6a:	ec41 0b18 	vmov	d8, r0, r1
 8005c6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005c72:	2200      	movs	r2, #0
 8005c74:	4640      	mov	r0, r8
 8005c76:	4649      	mov	r1, r9
 8005c78:	4614      	mov	r4, r2
 8005c7a:	461d      	mov	r5, r3
 8005c7c:	f7fa fc68 	bl	8000550 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa faaa 	bl	80001e0 <__aeabi_dsub>
 8005c8c:	ec53 2b19 	vmov	r2, r3, d9
 8005c90:	4606      	mov	r6, r0
 8005c92:	460f      	mov	r7, r1
 8005c94:	4620      	mov	r0, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	f7fa faa2 	bl	80001e0 <__aeabi_dsub>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	f7fa fa9c 	bl	80001e0 <__aeabi_dsub>
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	f7fa fc50 	bl	8000550 <__aeabi_dmul>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	f7fa fa92 	bl	80001e0 <__aeabi_dsub>
 8005cbc:	ec53 2b1a 	vmov	r2, r3, d10
 8005cc0:	f7fa fc46 	bl	8000550 <__aeabi_dmul>
 8005cc4:	ec53 2b18 	vmov	r2, r3, d8
 8005cc8:	ec41 0b19 	vmov	d9, r0, r1
 8005ccc:	ec51 0b18 	vmov	r0, r1, d8
 8005cd0:	f7fa fc3e 	bl	8000550 <__aeabi_dmul>
 8005cd4:	a37c      	add	r3, pc, #496	; (adr r3, 8005ec8 <__ieee754_pow+0x708>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	4604      	mov	r4, r0
 8005cdc:	460d      	mov	r5, r1
 8005cde:	f7fa fc37 	bl	8000550 <__aeabi_dmul>
 8005ce2:	a37b      	add	r3, pc, #492	; (adr r3, 8005ed0 <__ieee754_pow+0x710>)
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f7fa fa7c 	bl	80001e4 <__adddf3>
 8005cec:	4622      	mov	r2, r4
 8005cee:	462b      	mov	r3, r5
 8005cf0:	f7fa fc2e 	bl	8000550 <__aeabi_dmul>
 8005cf4:	a378      	add	r3, pc, #480	; (adr r3, 8005ed8 <__ieee754_pow+0x718>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fa73 	bl	80001e4 <__adddf3>
 8005cfe:	4622      	mov	r2, r4
 8005d00:	462b      	mov	r3, r5
 8005d02:	f7fa fc25 	bl	8000550 <__aeabi_dmul>
 8005d06:	a376      	add	r3, pc, #472	; (adr r3, 8005ee0 <__ieee754_pow+0x720>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f7fa fa6a 	bl	80001e4 <__adddf3>
 8005d10:	4622      	mov	r2, r4
 8005d12:	462b      	mov	r3, r5
 8005d14:	f7fa fc1c 	bl	8000550 <__aeabi_dmul>
 8005d18:	a373      	add	r3, pc, #460	; (adr r3, 8005ee8 <__ieee754_pow+0x728>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fa61 	bl	80001e4 <__adddf3>
 8005d22:	4622      	mov	r2, r4
 8005d24:	462b      	mov	r3, r5
 8005d26:	f7fa fc13 	bl	8000550 <__aeabi_dmul>
 8005d2a:	a371      	add	r3, pc, #452	; (adr r3, 8005ef0 <__ieee754_pow+0x730>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fa58 	bl	80001e4 <__adddf3>
 8005d34:	4622      	mov	r2, r4
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	4629      	mov	r1, r5
 8005d40:	f7fa fc06 	bl	8000550 <__aeabi_dmul>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fc00 	bl	8000550 <__aeabi_dmul>
 8005d50:	4642      	mov	r2, r8
 8005d52:	4604      	mov	r4, r0
 8005d54:	460d      	mov	r5, r1
 8005d56:	464b      	mov	r3, r9
 8005d58:	ec51 0b18 	vmov	r0, r1, d8
 8005d5c:	f7fa fa42 	bl	80001e4 <__adddf3>
 8005d60:	ec53 2b19 	vmov	r2, r3, d9
 8005d64:	f7fa fbf4 	bl	8000550 <__aeabi_dmul>
 8005d68:	4622      	mov	r2, r4
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	f7fa fa3a 	bl	80001e4 <__adddf3>
 8005d70:	4642      	mov	r2, r8
 8005d72:	4682      	mov	sl, r0
 8005d74:	468b      	mov	fp, r1
 8005d76:	464b      	mov	r3, r9
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	f7fa fbe8 	bl	8000550 <__aeabi_dmul>
 8005d80:	4b6b      	ldr	r3, [pc, #428]	; (8005f30 <__ieee754_pow+0x770>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	f7fa fa2c 	bl	80001e4 <__adddf3>
 8005d8c:	4652      	mov	r2, sl
 8005d8e:	465b      	mov	r3, fp
 8005d90:	f7fa fa28 	bl	80001e4 <__adddf3>
 8005d94:	2000      	movs	r0, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	460d      	mov	r5, r1
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4649      	mov	r1, r9
 8005da2:	f7fa fbd5 	bl	8000550 <__aeabi_dmul>
 8005da6:	4b62      	ldr	r3, [pc, #392]	; (8005f30 <__ieee754_pow+0x770>)
 8005da8:	4680      	mov	r8, r0
 8005daa:	4689      	mov	r9, r1
 8005dac:	2200      	movs	r2, #0
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fa15 	bl	80001e0 <__aeabi_dsub>
 8005db6:	4632      	mov	r2, r6
 8005db8:	463b      	mov	r3, r7
 8005dba:	f7fa fa11 	bl	80001e0 <__aeabi_dsub>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4650      	mov	r0, sl
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	f7fa fa0b 	bl	80001e0 <__aeabi_dsub>
 8005dca:	ec53 2b18 	vmov	r2, r3, d8
 8005dce:	f7fa fbbf 	bl	8000550 <__aeabi_dmul>
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	460f      	mov	r7, r1
 8005dd8:	462b      	mov	r3, r5
 8005dda:	ec51 0b19 	vmov	r0, r1, d9
 8005dde:	f7fa fbb7 	bl	8000550 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4630      	mov	r0, r6
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa f9fb 	bl	80001e4 <__adddf3>
 8005dee:	4606      	mov	r6, r0
 8005df0:	460f      	mov	r7, r1
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa f9f3 	bl	80001e4 <__adddf3>
 8005dfe:	a33e      	add	r3, pc, #248	; (adr r3, 8005ef8 <__ieee754_pow+0x738>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	2000      	movs	r0, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	460d      	mov	r5, r1
 8005e0a:	f7fa fba1 	bl	8000550 <__aeabi_dmul>
 8005e0e:	4642      	mov	r2, r8
 8005e10:	ec41 0b18 	vmov	d8, r0, r1
 8005e14:	464b      	mov	r3, r9
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fa f9e1 	bl	80001e0 <__aeabi_dsub>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa f9db 	bl	80001e0 <__aeabi_dsub>
 8005e2a:	a335      	add	r3, pc, #212	; (adr r3, 8005f00 <__ieee754_pow+0x740>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa fb8e 	bl	8000550 <__aeabi_dmul>
 8005e34:	a334      	add	r3, pc, #208	; (adr r3, 8005f08 <__ieee754_pow+0x748>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460f      	mov	r7, r1
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa fb85 	bl	8000550 <__aeabi_dmul>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	f7fa f9c9 	bl	80001e4 <__adddf3>
 8005e52:	9a07      	ldr	r2, [sp, #28]
 8005e54:	4b37      	ldr	r3, [pc, #220]	; (8005f34 <__ieee754_pow+0x774>)
 8005e56:	4413      	add	r3, r2
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa f9c2 	bl	80001e4 <__adddf3>
 8005e60:	4682      	mov	sl, r0
 8005e62:	9805      	ldr	r0, [sp, #20]
 8005e64:	468b      	mov	fp, r1
 8005e66:	f7fa fb09 	bl	800047c <__aeabi_i2d>
 8005e6a:	9a07      	ldr	r2, [sp, #28]
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <__ieee754_pow+0x778>)
 8005e6e:	4413      	add	r3, r2
 8005e70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	465b      	mov	r3, fp
 8005e7c:	ec51 0b18 	vmov	r0, r1, d8
 8005e80:	f7fa f9b0 	bl	80001e4 <__adddf3>
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	f7fa f9ac 	bl	80001e4 <__adddf3>
 8005e8c:	4632      	mov	r2, r6
 8005e8e:	463b      	mov	r3, r7
 8005e90:	f7fa f9a8 	bl	80001e4 <__adddf3>
 8005e94:	2000      	movs	r0, #0
 8005e96:	4632      	mov	r2, r6
 8005e98:	463b      	mov	r3, r7
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	f7fa f99f 	bl	80001e0 <__aeabi_dsub>
 8005ea2:	4642      	mov	r2, r8
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	f7fa f99b 	bl	80001e0 <__aeabi_dsub>
 8005eaa:	ec53 2b18 	vmov	r2, r3, d8
 8005eae:	f7fa f997 	bl	80001e0 <__aeabi_dsub>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	4659      	mov	r1, fp
 8005eba:	e610      	b.n	8005ade <__ieee754_pow+0x31e>
 8005ebc:	2401      	movs	r4, #1
 8005ebe:	e6a1      	b.n	8005c04 <__ieee754_pow+0x444>
 8005ec0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005f10 <__ieee754_pow+0x750>
 8005ec4:	e617      	b.n	8005af6 <__ieee754_pow+0x336>
 8005ec6:	bf00      	nop
 8005ec8:	4a454eef 	.word	0x4a454eef
 8005ecc:	3fca7e28 	.word	0x3fca7e28
 8005ed0:	93c9db65 	.word	0x93c9db65
 8005ed4:	3fcd864a 	.word	0x3fcd864a
 8005ed8:	a91d4101 	.word	0xa91d4101
 8005edc:	3fd17460 	.word	0x3fd17460
 8005ee0:	518f264d 	.word	0x518f264d
 8005ee4:	3fd55555 	.word	0x3fd55555
 8005ee8:	db6fabff 	.word	0xdb6fabff
 8005eec:	3fdb6db6 	.word	0x3fdb6db6
 8005ef0:	33333303 	.word	0x33333303
 8005ef4:	3fe33333 	.word	0x3fe33333
 8005ef8:	e0000000 	.word	0xe0000000
 8005efc:	3feec709 	.word	0x3feec709
 8005f00:	dc3a03fd 	.word	0xdc3a03fd
 8005f04:	3feec709 	.word	0x3feec709
 8005f08:	145b01f5 	.word	0x145b01f5
 8005f0c:	be3e2fe0 	.word	0xbe3e2fe0
 8005f10:	00000000 	.word	0x00000000
 8005f14:	3ff00000 	.word	0x3ff00000
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	43400000 	.word	0x43400000
 8005f20:	0003988e 	.word	0x0003988e
 8005f24:	000bb679 	.word	0x000bb679
 8005f28:	08006730 	.word	0x08006730
 8005f2c:	3ff00000 	.word	0x3ff00000
 8005f30:	40080000 	.word	0x40080000
 8005f34:	08006750 	.word	0x08006750
 8005f38:	08006740 	.word	0x08006740
 8005f3c:	a3b3      	add	r3, pc, #716	; (adr r3, 800620c <__ieee754_pow+0xa4c>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	f7fa f94d 	bl	80001e4 <__adddf3>
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	ec41 0b1a 	vmov	d10, r0, r1
 8005f50:	462b      	mov	r3, r5
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f7fa f943 	bl	80001e0 <__aeabi_dsub>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	ec51 0b1a 	vmov	r0, r1, d10
 8005f62:	f7fa fd85 	bl	8000a70 <__aeabi_dcmpgt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f47f ae04 	bne.w	8005b74 <__ieee754_pow+0x3b4>
 8005f6c:	4aa2      	ldr	r2, [pc, #648]	; (80061f8 <__ieee754_pow+0xa38>)
 8005f6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f72:	4293      	cmp	r3, r2
 8005f74:	f340 8107 	ble.w	8006186 <__ieee754_pow+0x9c6>
 8005f78:	151b      	asrs	r3, r3, #20
 8005f7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005f7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005f82:	fa4a fa03 	asr.w	sl, sl, r3
 8005f86:	44da      	add	sl, fp
 8005f88:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005f8c:	489b      	ldr	r0, [pc, #620]	; (80061fc <__ieee754_pow+0xa3c>)
 8005f8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005f92:	4108      	asrs	r0, r1
 8005f94:	ea00 030a 	and.w	r3, r0, sl
 8005f98:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005f9c:	f1c1 0114 	rsb	r1, r1, #20
 8005fa0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005fa4:	fa4a fa01 	asr.w	sl, sl, r1
 8005fa8:	f1bb 0f00 	cmp.w	fp, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	bfb8      	it	lt
 8005fb6:	f1ca 0a00 	rsblt	sl, sl, #0
 8005fba:	f7fa f911 	bl	80001e0 <__aeabi_dsub>
 8005fbe:	ec41 0b19 	vmov	d9, r0, r1
 8005fc2:	4642      	mov	r2, r8
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	ec51 0b19 	vmov	r0, r1, d9
 8005fca:	f7fa f90b 	bl	80001e4 <__adddf3>
 8005fce:	a37a      	add	r3, pc, #488	; (adr r3, 80061b8 <__ieee754_pow+0x9f8>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	460d      	mov	r5, r1
 8005fda:	f7fa fab9 	bl	8000550 <__aeabi_dmul>
 8005fde:	ec53 2b19 	vmov	r2, r3, d9
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4629      	mov	r1, r5
 8005fea:	f7fa f8f9 	bl	80001e0 <__aeabi_dsub>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	f7fa f8f3 	bl	80001e0 <__aeabi_dsub>
 8005ffa:	a371      	add	r3, pc, #452	; (adr r3, 80061c0 <__ieee754_pow+0xa00>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f7fa faa6 	bl	8000550 <__aeabi_dmul>
 8006004:	a370      	add	r3, pc, #448	; (adr r3, 80061c8 <__ieee754_pow+0xa08>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	4680      	mov	r8, r0
 800600c:	4689      	mov	r9, r1
 800600e:	4620      	mov	r0, r4
 8006010:	4629      	mov	r1, r5
 8006012:	f7fa fa9d 	bl	8000550 <__aeabi_dmul>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4640      	mov	r0, r8
 800601c:	4649      	mov	r1, r9
 800601e:	f7fa f8e1 	bl	80001e4 <__adddf3>
 8006022:	4604      	mov	r4, r0
 8006024:	460d      	mov	r5, r1
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa f8d9 	bl	80001e4 <__adddf3>
 8006032:	4632      	mov	r2, r6
 8006034:	463b      	mov	r3, r7
 8006036:	4680      	mov	r8, r0
 8006038:	4689      	mov	r9, r1
 800603a:	f7fa f8d1 	bl	80001e0 <__aeabi_dsub>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f7fa f8cb 	bl	80001e0 <__aeabi_dsub>
 800604a:	4642      	mov	r2, r8
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	464b      	mov	r3, r9
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa fa7b 	bl	8000550 <__aeabi_dmul>
 800605a:	a35d      	add	r3, pc, #372	; (adr r3, 80061d0 <__ieee754_pow+0xa10>)
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	4604      	mov	r4, r0
 8006062:	460d      	mov	r5, r1
 8006064:	f7fa fa74 	bl	8000550 <__aeabi_dmul>
 8006068:	a35b      	add	r3, pc, #364	; (adr r3, 80061d8 <__ieee754_pow+0xa18>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa f8b7 	bl	80001e0 <__aeabi_dsub>
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	f7fa fa6b 	bl	8000550 <__aeabi_dmul>
 800607a:	a359      	add	r3, pc, #356	; (adr r3, 80061e0 <__ieee754_pow+0xa20>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa f8b0 	bl	80001e4 <__adddf3>
 8006084:	4622      	mov	r2, r4
 8006086:	462b      	mov	r3, r5
 8006088:	f7fa fa62 	bl	8000550 <__aeabi_dmul>
 800608c:	a356      	add	r3, pc, #344	; (adr r3, 80061e8 <__ieee754_pow+0xa28>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa f8a5 	bl	80001e0 <__aeabi_dsub>
 8006096:	4622      	mov	r2, r4
 8006098:	462b      	mov	r3, r5
 800609a:	f7fa fa59 	bl	8000550 <__aeabi_dmul>
 800609e:	a354      	add	r3, pc, #336	; (adr r3, 80061f0 <__ieee754_pow+0xa30>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa f89e 	bl	80001e4 <__adddf3>
 80060a8:	4622      	mov	r2, r4
 80060aa:	462b      	mov	r3, r5
 80060ac:	f7fa fa50 	bl	8000550 <__aeabi_dmul>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa f892 	bl	80001e0 <__aeabi_dsub>
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4640      	mov	r0, r8
 80060c6:	4649      	mov	r1, r9
 80060c8:	f7fa fa42 	bl	8000550 <__aeabi_dmul>
 80060cc:	2200      	movs	r2, #0
 80060ce:	ec41 0b19 	vmov	d9, r0, r1
 80060d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa f881 	bl	80001e0 <__aeabi_dsub>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	ec51 0b19 	vmov	r0, r1, d9
 80060e6:	f7fa fb5d 	bl	80007a4 <__aeabi_ddiv>
 80060ea:	4632      	mov	r2, r6
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	463b      	mov	r3, r7
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa fa2b 	bl	8000550 <__aeabi_dmul>
 80060fa:	4632      	mov	r2, r6
 80060fc:	463b      	mov	r3, r7
 80060fe:	f7fa f871 	bl	80001e4 <__adddf3>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4620      	mov	r0, r4
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa f869 	bl	80001e0 <__aeabi_dsub>
 800610e:	4642      	mov	r2, r8
 8006110:	464b      	mov	r3, r9
 8006112:	f7fa f865 	bl	80001e0 <__aeabi_dsub>
 8006116:	460b      	mov	r3, r1
 8006118:	4602      	mov	r2, r0
 800611a:	4939      	ldr	r1, [pc, #228]	; (8006200 <__ieee754_pow+0xa40>)
 800611c:	2000      	movs	r0, #0
 800611e:	f7fa f85f 	bl	80001e0 <__aeabi_dsub>
 8006122:	ec41 0b10 	vmov	d0, r0, r1
 8006126:	ee10 3a90 	vmov	r3, s1
 800612a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800612e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006132:	da2b      	bge.n	800618c <__ieee754_pow+0x9cc>
 8006134:	4650      	mov	r0, sl
 8006136:	f000 fa1b 	bl	8006570 <scalbn>
 800613a:	ec51 0b10 	vmov	r0, r1, d0
 800613e:	ec53 2b18 	vmov	r2, r3, d8
 8006142:	f7ff bbee 	b.w	8005922 <__ieee754_pow+0x162>
 8006146:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <__ieee754_pow+0xa44>)
 8006148:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800614c:	429e      	cmp	r6, r3
 800614e:	f77f af0d 	ble.w	8005f6c <__ieee754_pow+0x7ac>
 8006152:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <__ieee754_pow+0xa48>)
 8006154:	440b      	add	r3, r1
 8006156:	4303      	orrs	r3, r0
 8006158:	d009      	beq.n	800616e <__ieee754_pow+0x9ae>
 800615a:	ec51 0b18 	vmov	r0, r1, d8
 800615e:	2200      	movs	r2, #0
 8006160:	2300      	movs	r3, #0
 8006162:	f7fa fc67 	bl	8000a34 <__aeabi_dcmplt>
 8006166:	3800      	subs	r0, #0
 8006168:	bf18      	it	ne
 800616a:	2001      	movne	r0, #1
 800616c:	e448      	b.n	8005a00 <__ieee754_pow+0x240>
 800616e:	4622      	mov	r2, r4
 8006170:	462b      	mov	r3, r5
 8006172:	f7fa f835 	bl	80001e0 <__aeabi_dsub>
 8006176:	4642      	mov	r2, r8
 8006178:	464b      	mov	r3, r9
 800617a:	f7fa fc6f 	bl	8000a5c <__aeabi_dcmpge>
 800617e:	2800      	cmp	r0, #0
 8006180:	f43f aef4 	beq.w	8005f6c <__ieee754_pow+0x7ac>
 8006184:	e7e9      	b.n	800615a <__ieee754_pow+0x99a>
 8006186:	f04f 0a00 	mov.w	sl, #0
 800618a:	e71a      	b.n	8005fc2 <__ieee754_pow+0x802>
 800618c:	ec51 0b10 	vmov	r0, r1, d0
 8006190:	4619      	mov	r1, r3
 8006192:	e7d4      	b.n	800613e <__ieee754_pow+0x97e>
 8006194:	491a      	ldr	r1, [pc, #104]	; (8006200 <__ieee754_pow+0xa40>)
 8006196:	2000      	movs	r0, #0
 8006198:	f7ff bb31 	b.w	80057fe <__ieee754_pow+0x3e>
 800619c:	2000      	movs	r0, #0
 800619e:	2100      	movs	r1, #0
 80061a0:	f7ff bb2d 	b.w	80057fe <__ieee754_pow+0x3e>
 80061a4:	4630      	mov	r0, r6
 80061a6:	4639      	mov	r1, r7
 80061a8:	f7ff bb29 	b.w	80057fe <__ieee754_pow+0x3e>
 80061ac:	9204      	str	r2, [sp, #16]
 80061ae:	f7ff bb7b 	b.w	80058a8 <__ieee754_pow+0xe8>
 80061b2:	2300      	movs	r3, #0
 80061b4:	f7ff bb65 	b.w	8005882 <__ieee754_pow+0xc2>
 80061b8:	00000000 	.word	0x00000000
 80061bc:	3fe62e43 	.word	0x3fe62e43
 80061c0:	fefa39ef 	.word	0xfefa39ef
 80061c4:	3fe62e42 	.word	0x3fe62e42
 80061c8:	0ca86c39 	.word	0x0ca86c39
 80061cc:	be205c61 	.word	0xbe205c61
 80061d0:	72bea4d0 	.word	0x72bea4d0
 80061d4:	3e663769 	.word	0x3e663769
 80061d8:	c5d26bf1 	.word	0xc5d26bf1
 80061dc:	3ebbbd41 	.word	0x3ebbbd41
 80061e0:	af25de2c 	.word	0xaf25de2c
 80061e4:	3f11566a 	.word	0x3f11566a
 80061e8:	16bebd93 	.word	0x16bebd93
 80061ec:	3f66c16c 	.word	0x3f66c16c
 80061f0:	5555553e 	.word	0x5555553e
 80061f4:	3fc55555 	.word	0x3fc55555
 80061f8:	3fe00000 	.word	0x3fe00000
 80061fc:	fff00000 	.word	0xfff00000
 8006200:	3ff00000 	.word	0x3ff00000
 8006204:	4090cbff 	.word	0x4090cbff
 8006208:	3f6f3400 	.word	0x3f6f3400
 800620c:	652b82fe 	.word	0x652b82fe
 8006210:	3c971547 	.word	0x3c971547
 8006214:	00000000 	.word	0x00000000

08006218 <atan>:
 8006218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	ec55 4b10 	vmov	r4, r5, d0
 8006220:	4bc3      	ldr	r3, [pc, #780]	; (8006530 <atan+0x318>)
 8006222:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006226:	429e      	cmp	r6, r3
 8006228:	46ab      	mov	fp, r5
 800622a:	dd18      	ble.n	800625e <atan+0x46>
 800622c:	4bc1      	ldr	r3, [pc, #772]	; (8006534 <atan+0x31c>)
 800622e:	429e      	cmp	r6, r3
 8006230:	dc01      	bgt.n	8006236 <atan+0x1e>
 8006232:	d109      	bne.n	8006248 <atan+0x30>
 8006234:	b144      	cbz	r4, 8006248 <atan+0x30>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7f9 ffd1 	bl	80001e4 <__adddf3>
 8006242:	4604      	mov	r4, r0
 8006244:	460d      	mov	r5, r1
 8006246:	e006      	b.n	8006256 <atan+0x3e>
 8006248:	f1bb 0f00 	cmp.w	fp, #0
 800624c:	f300 8131 	bgt.w	80064b2 <atan+0x29a>
 8006250:	a59b      	add	r5, pc, #620	; (adr r5, 80064c0 <atan+0x2a8>)
 8006252:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006256:	ec45 4b10 	vmov	d0, r4, r5
 800625a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	4bb6      	ldr	r3, [pc, #728]	; (8006538 <atan+0x320>)
 8006260:	429e      	cmp	r6, r3
 8006262:	dc14      	bgt.n	800628e <atan+0x76>
 8006264:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006268:	429e      	cmp	r6, r3
 800626a:	dc0d      	bgt.n	8006288 <atan+0x70>
 800626c:	a396      	add	r3, pc, #600	; (adr r3, 80064c8 <atan+0x2b0>)
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	ee10 0a10 	vmov	r0, s0
 8006276:	4629      	mov	r1, r5
 8006278:	f7f9 ffb4 	bl	80001e4 <__adddf3>
 800627c:	4baf      	ldr	r3, [pc, #700]	; (800653c <atan+0x324>)
 800627e:	2200      	movs	r2, #0
 8006280:	f7fa fbf6 	bl	8000a70 <__aeabi_dcmpgt>
 8006284:	2800      	cmp	r0, #0
 8006286:	d1e6      	bne.n	8006256 <atan+0x3e>
 8006288:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800628c:	e02b      	b.n	80062e6 <atan+0xce>
 800628e:	f000 f963 	bl	8006558 <fabs>
 8006292:	4bab      	ldr	r3, [pc, #684]	; (8006540 <atan+0x328>)
 8006294:	429e      	cmp	r6, r3
 8006296:	ec55 4b10 	vmov	r4, r5, d0
 800629a:	f300 80bf 	bgt.w	800641c <atan+0x204>
 800629e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80062a2:	429e      	cmp	r6, r3
 80062a4:	f300 80a0 	bgt.w	80063e8 <atan+0x1d0>
 80062a8:	ee10 2a10 	vmov	r2, s0
 80062ac:	ee10 0a10 	vmov	r0, s0
 80062b0:	462b      	mov	r3, r5
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7f9 ff96 	bl	80001e4 <__adddf3>
 80062b8:	4ba0      	ldr	r3, [pc, #640]	; (800653c <atan+0x324>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	f7f9 ff90 	bl	80001e0 <__aeabi_dsub>
 80062c0:	2200      	movs	r2, #0
 80062c2:	4606      	mov	r6, r0
 80062c4:	460f      	mov	r7, r1
 80062c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062ca:	4620      	mov	r0, r4
 80062cc:	4629      	mov	r1, r5
 80062ce:	f7f9 ff89 	bl	80001e4 <__adddf3>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4630      	mov	r0, r6
 80062d8:	4639      	mov	r1, r7
 80062da:	f7fa fa63 	bl	80007a4 <__aeabi_ddiv>
 80062de:	f04f 0a00 	mov.w	sl, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	460d      	mov	r5, r1
 80062e6:	4622      	mov	r2, r4
 80062e8:	462b      	mov	r3, r5
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7fa f92f 	bl	8000550 <__aeabi_dmul>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4680      	mov	r8, r0
 80062f8:	4689      	mov	r9, r1
 80062fa:	f7fa f929 	bl	8000550 <__aeabi_dmul>
 80062fe:	a374      	add	r3, pc, #464	; (adr r3, 80064d0 <atan+0x2b8>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	4606      	mov	r6, r0
 8006306:	460f      	mov	r7, r1
 8006308:	f7fa f922 	bl	8000550 <__aeabi_dmul>
 800630c:	a372      	add	r3, pc, #456	; (adr r3, 80064d8 <atan+0x2c0>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f7f9 ff67 	bl	80001e4 <__adddf3>
 8006316:	4632      	mov	r2, r6
 8006318:	463b      	mov	r3, r7
 800631a:	f7fa f919 	bl	8000550 <__aeabi_dmul>
 800631e:	a370      	add	r3, pc, #448	; (adr r3, 80064e0 <atan+0x2c8>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7f9 ff5e 	bl	80001e4 <__adddf3>
 8006328:	4632      	mov	r2, r6
 800632a:	463b      	mov	r3, r7
 800632c:	f7fa f910 	bl	8000550 <__aeabi_dmul>
 8006330:	a36d      	add	r3, pc, #436	; (adr r3, 80064e8 <atan+0x2d0>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f7f9 ff55 	bl	80001e4 <__adddf3>
 800633a:	4632      	mov	r2, r6
 800633c:	463b      	mov	r3, r7
 800633e:	f7fa f907 	bl	8000550 <__aeabi_dmul>
 8006342:	a36b      	add	r3, pc, #428	; (adr r3, 80064f0 <atan+0x2d8>)
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f7f9 ff4c 	bl	80001e4 <__adddf3>
 800634c:	4632      	mov	r2, r6
 800634e:	463b      	mov	r3, r7
 8006350:	f7fa f8fe 	bl	8000550 <__aeabi_dmul>
 8006354:	a368      	add	r3, pc, #416	; (adr r3, 80064f8 <atan+0x2e0>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f7f9 ff43 	bl	80001e4 <__adddf3>
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	f7fa f8f5 	bl	8000550 <__aeabi_dmul>
 8006366:	a366      	add	r3, pc, #408	; (adr r3, 8006500 <atan+0x2e8>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	4680      	mov	r8, r0
 800636e:	4689      	mov	r9, r1
 8006370:	4630      	mov	r0, r6
 8006372:	4639      	mov	r1, r7
 8006374:	f7fa f8ec 	bl	8000550 <__aeabi_dmul>
 8006378:	a363      	add	r3, pc, #396	; (adr r3, 8006508 <atan+0x2f0>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7f9 ff2f 	bl	80001e0 <__aeabi_dsub>
 8006382:	4632      	mov	r2, r6
 8006384:	463b      	mov	r3, r7
 8006386:	f7fa f8e3 	bl	8000550 <__aeabi_dmul>
 800638a:	a361      	add	r3, pc, #388	; (adr r3, 8006510 <atan+0x2f8>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7f9 ff26 	bl	80001e0 <__aeabi_dsub>
 8006394:	4632      	mov	r2, r6
 8006396:	463b      	mov	r3, r7
 8006398:	f7fa f8da 	bl	8000550 <__aeabi_dmul>
 800639c:	a35e      	add	r3, pc, #376	; (adr r3, 8006518 <atan+0x300>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f7f9 ff1d 	bl	80001e0 <__aeabi_dsub>
 80063a6:	4632      	mov	r2, r6
 80063a8:	463b      	mov	r3, r7
 80063aa:	f7fa f8d1 	bl	8000550 <__aeabi_dmul>
 80063ae:	a35c      	add	r3, pc, #368	; (adr r3, 8006520 <atan+0x308>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7f9 ff14 	bl	80001e0 <__aeabi_dsub>
 80063b8:	4632      	mov	r2, r6
 80063ba:	463b      	mov	r3, r7
 80063bc:	f7fa f8c8 	bl	8000550 <__aeabi_dmul>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7f9 ff0c 	bl	80001e4 <__adddf3>
 80063cc:	4622      	mov	r2, r4
 80063ce:	462b      	mov	r3, r5
 80063d0:	f7fa f8be 	bl	8000550 <__aeabi_dmul>
 80063d4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	d14b      	bne.n	8006476 <atan+0x25e>
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7f9 fefd 	bl	80001e0 <__aeabi_dsub>
 80063e6:	e72c      	b.n	8006242 <atan+0x2a>
 80063e8:	ee10 0a10 	vmov	r0, s0
 80063ec:	4b53      	ldr	r3, [pc, #332]	; (800653c <atan+0x324>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	4629      	mov	r1, r5
 80063f2:	f7f9 fef5 	bl	80001e0 <__aeabi_dsub>
 80063f6:	4b51      	ldr	r3, [pc, #324]	; (800653c <atan+0x324>)
 80063f8:	4606      	mov	r6, r0
 80063fa:	460f      	mov	r7, r1
 80063fc:	2200      	movs	r2, #0
 80063fe:	4620      	mov	r0, r4
 8006400:	4629      	mov	r1, r5
 8006402:	f7f9 feef 	bl	80001e4 <__adddf3>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4630      	mov	r0, r6
 800640c:	4639      	mov	r1, r7
 800640e:	f7fa f9c9 	bl	80007a4 <__aeabi_ddiv>
 8006412:	f04f 0a01 	mov.w	sl, #1
 8006416:	4604      	mov	r4, r0
 8006418:	460d      	mov	r5, r1
 800641a:	e764      	b.n	80062e6 <atan+0xce>
 800641c:	4b49      	ldr	r3, [pc, #292]	; (8006544 <atan+0x32c>)
 800641e:	429e      	cmp	r6, r3
 8006420:	da1d      	bge.n	800645e <atan+0x246>
 8006422:	ee10 0a10 	vmov	r0, s0
 8006426:	4b48      	ldr	r3, [pc, #288]	; (8006548 <atan+0x330>)
 8006428:	2200      	movs	r2, #0
 800642a:	4629      	mov	r1, r5
 800642c:	f7f9 fed8 	bl	80001e0 <__aeabi_dsub>
 8006430:	4b45      	ldr	r3, [pc, #276]	; (8006548 <atan+0x330>)
 8006432:	4606      	mov	r6, r0
 8006434:	460f      	mov	r7, r1
 8006436:	2200      	movs	r2, #0
 8006438:	4620      	mov	r0, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f7fa f888 	bl	8000550 <__aeabi_dmul>
 8006440:	4b3e      	ldr	r3, [pc, #248]	; (800653c <atan+0x324>)
 8006442:	2200      	movs	r2, #0
 8006444:	f7f9 fece 	bl	80001e4 <__adddf3>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4630      	mov	r0, r6
 800644e:	4639      	mov	r1, r7
 8006450:	f7fa f9a8 	bl	80007a4 <__aeabi_ddiv>
 8006454:	f04f 0a02 	mov.w	sl, #2
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	e743      	b.n	80062e6 <atan+0xce>
 800645e:	462b      	mov	r3, r5
 8006460:	ee10 2a10 	vmov	r2, s0
 8006464:	4939      	ldr	r1, [pc, #228]	; (800654c <atan+0x334>)
 8006466:	2000      	movs	r0, #0
 8006468:	f7fa f99c 	bl	80007a4 <__aeabi_ddiv>
 800646c:	f04f 0a03 	mov.w	sl, #3
 8006470:	4604      	mov	r4, r0
 8006472:	460d      	mov	r5, r1
 8006474:	e737      	b.n	80062e6 <atan+0xce>
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <atan+0x338>)
 8006478:	4e36      	ldr	r6, [pc, #216]	; (8006554 <atan+0x33c>)
 800647a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7f9 fead 	bl	80001e0 <__aeabi_dsub>
 8006486:	4622      	mov	r2, r4
 8006488:	462b      	mov	r3, r5
 800648a:	f7f9 fea9 	bl	80001e0 <__aeabi_dsub>
 800648e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	e9d6 0100 	ldrd	r0, r1, [r6]
 800649a:	f7f9 fea1 	bl	80001e0 <__aeabi_dsub>
 800649e:	f1bb 0f00 	cmp.w	fp, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	460d      	mov	r5, r1
 80064a6:	f6bf aed6 	bge.w	8006256 <atan+0x3e>
 80064aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ae:	461d      	mov	r5, r3
 80064b0:	e6d1      	b.n	8006256 <atan+0x3e>
 80064b2:	a51d      	add	r5, pc, #116	; (adr r5, 8006528 <atan+0x310>)
 80064b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064b8:	e6cd      	b.n	8006256 <atan+0x3e>
 80064ba:	bf00      	nop
 80064bc:	f3af 8000 	nop.w
 80064c0:	54442d18 	.word	0x54442d18
 80064c4:	bff921fb 	.word	0xbff921fb
 80064c8:	8800759c 	.word	0x8800759c
 80064cc:	7e37e43c 	.word	0x7e37e43c
 80064d0:	e322da11 	.word	0xe322da11
 80064d4:	3f90ad3a 	.word	0x3f90ad3a
 80064d8:	24760deb 	.word	0x24760deb
 80064dc:	3fa97b4b 	.word	0x3fa97b4b
 80064e0:	a0d03d51 	.word	0xa0d03d51
 80064e4:	3fb10d66 	.word	0x3fb10d66
 80064e8:	c54c206e 	.word	0xc54c206e
 80064ec:	3fb745cd 	.word	0x3fb745cd
 80064f0:	920083ff 	.word	0x920083ff
 80064f4:	3fc24924 	.word	0x3fc24924
 80064f8:	5555550d 	.word	0x5555550d
 80064fc:	3fd55555 	.word	0x3fd55555
 8006500:	2c6a6c2f 	.word	0x2c6a6c2f
 8006504:	bfa2b444 	.word	0xbfa2b444
 8006508:	52defd9a 	.word	0x52defd9a
 800650c:	3fadde2d 	.word	0x3fadde2d
 8006510:	af749a6d 	.word	0xaf749a6d
 8006514:	3fb3b0f2 	.word	0x3fb3b0f2
 8006518:	fe231671 	.word	0xfe231671
 800651c:	3fbc71c6 	.word	0x3fbc71c6
 8006520:	9998ebc4 	.word	0x9998ebc4
 8006524:	3fc99999 	.word	0x3fc99999
 8006528:	54442d18 	.word	0x54442d18
 800652c:	3ff921fb 	.word	0x3ff921fb
 8006530:	440fffff 	.word	0x440fffff
 8006534:	7ff00000 	.word	0x7ff00000
 8006538:	3fdbffff 	.word	0x3fdbffff
 800653c:	3ff00000 	.word	0x3ff00000
 8006540:	3ff2ffff 	.word	0x3ff2ffff
 8006544:	40038000 	.word	0x40038000
 8006548:	3ff80000 	.word	0x3ff80000
 800654c:	bff00000 	.word	0xbff00000
 8006550:	08006780 	.word	0x08006780
 8006554:	08006760 	.word	0x08006760

08006558 <fabs>:
 8006558:	ec51 0b10 	vmov	r0, r1, d0
 800655c:	ee10 2a10 	vmov	r2, s0
 8006560:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006564:	ec43 2b10 	vmov	d0, r2, r3
 8006568:	4770      	bx	lr
 800656a:	0000      	movs	r0, r0
 800656c:	0000      	movs	r0, r0
	...

08006570 <scalbn>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	ec55 4b10 	vmov	r4, r5, d0
 8006576:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800657a:	4606      	mov	r6, r0
 800657c:	462b      	mov	r3, r5
 800657e:	b999      	cbnz	r1, 80065a8 <scalbn+0x38>
 8006580:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006584:	4323      	orrs	r3, r4
 8006586:	d03f      	beq.n	8006608 <scalbn+0x98>
 8006588:	4b35      	ldr	r3, [pc, #212]	; (8006660 <scalbn+0xf0>)
 800658a:	4629      	mov	r1, r5
 800658c:	ee10 0a10 	vmov	r0, s0
 8006590:	2200      	movs	r2, #0
 8006592:	f7f9 ffdd 	bl	8000550 <__aeabi_dmul>
 8006596:	4b33      	ldr	r3, [pc, #204]	; (8006664 <scalbn+0xf4>)
 8006598:	429e      	cmp	r6, r3
 800659a:	4604      	mov	r4, r0
 800659c:	460d      	mov	r5, r1
 800659e:	da10      	bge.n	80065c2 <scalbn+0x52>
 80065a0:	a327      	add	r3, pc, #156	; (adr r3, 8006640 <scalbn+0xd0>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	e01f      	b.n	80065e8 <scalbn+0x78>
 80065a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80065ac:	4291      	cmp	r1, r2
 80065ae:	d10c      	bne.n	80065ca <scalbn+0x5a>
 80065b0:	ee10 2a10 	vmov	r2, s0
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	f7f9 fe14 	bl	80001e4 <__adddf3>
 80065bc:	4604      	mov	r4, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	e022      	b.n	8006608 <scalbn+0x98>
 80065c2:	460b      	mov	r3, r1
 80065c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80065c8:	3936      	subs	r1, #54	; 0x36
 80065ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80065ce:	4296      	cmp	r6, r2
 80065d0:	dd0d      	ble.n	80065ee <scalbn+0x7e>
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	a11c      	add	r1, pc, #112	; (adr r1, 8006648 <scalbn+0xd8>)
 80065d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065da:	da02      	bge.n	80065e2 <scalbn+0x72>
 80065dc:	a11c      	add	r1, pc, #112	; (adr r1, 8006650 <scalbn+0xe0>)
 80065de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065e2:	a319      	add	r3, pc, #100	; (adr r3, 8006648 <scalbn+0xd8>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f7f9 ffb2 	bl	8000550 <__aeabi_dmul>
 80065ec:	e7e6      	b.n	80065bc <scalbn+0x4c>
 80065ee:	1872      	adds	r2, r6, r1
 80065f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80065f4:	428a      	cmp	r2, r1
 80065f6:	dcec      	bgt.n	80065d2 <scalbn+0x62>
 80065f8:	2a00      	cmp	r2, #0
 80065fa:	dd08      	ble.n	800660e <scalbn+0x9e>
 80065fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006600:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006604:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006608:	ec45 4b10 	vmov	d0, r4, r5
 800660c:	bd70      	pop	{r4, r5, r6, pc}
 800660e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006612:	da08      	bge.n	8006626 <scalbn+0xb6>
 8006614:	2d00      	cmp	r5, #0
 8006616:	a10a      	add	r1, pc, #40	; (adr r1, 8006640 <scalbn+0xd0>)
 8006618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800661c:	dac0      	bge.n	80065a0 <scalbn+0x30>
 800661e:	a10e      	add	r1, pc, #56	; (adr r1, 8006658 <scalbn+0xe8>)
 8006620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006624:	e7bc      	b.n	80065a0 <scalbn+0x30>
 8006626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800662a:	3236      	adds	r2, #54	; 0x36
 800662c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006630:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006634:	4620      	mov	r0, r4
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <scalbn+0xf8>)
 8006638:	2200      	movs	r2, #0
 800663a:	e7d5      	b.n	80065e8 <scalbn+0x78>
 800663c:	f3af 8000 	nop.w
 8006640:	c2f8f359 	.word	0xc2f8f359
 8006644:	01a56e1f 	.word	0x01a56e1f
 8006648:	8800759c 	.word	0x8800759c
 800664c:	7e37e43c 	.word	0x7e37e43c
 8006650:	8800759c 	.word	0x8800759c
 8006654:	fe37e43c 	.word	0xfe37e43c
 8006658:	c2f8f359 	.word	0xc2f8f359
 800665c:	81a56e1f 	.word	0x81a56e1f
 8006660:	43500000 	.word	0x43500000
 8006664:	ffff3cb0 	.word	0xffff3cb0
 8006668:	3c900000 	.word	0x3c900000

0800666c <with_errno>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	4616      	mov	r6, r2
 8006674:	f7fe fe2e 	bl	80052d4 <__errno>
 8006678:	4629      	mov	r1, r5
 800667a:	6006      	str	r6, [r0, #0]
 800667c:	4620      	mov	r0, r4
 800667e:	bd70      	pop	{r4, r5, r6, pc}

08006680 <xflow>:
 8006680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006682:	4614      	mov	r4, r2
 8006684:	461d      	mov	r5, r3
 8006686:	b108      	cbz	r0, 800668c <xflow+0xc>
 8006688:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800668c:	e9cd 2300 	strd	r2, r3, [sp]
 8006690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 ff5a 	bl	8000550 <__aeabi_dmul>
 800669c:	2222      	movs	r2, #34	; 0x22
 800669e:	b003      	add	sp, #12
 80066a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066a4:	f7ff bfe2 	b.w	800666c <with_errno>

080066a8 <__math_uflow>:
 80066a8:	b508      	push	{r3, lr}
 80066aa:	2200      	movs	r2, #0
 80066ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066b0:	f7ff ffe6 	bl	8006680 <xflow>
 80066b4:	ec41 0b10 	vmov	d0, r0, r1
 80066b8:	bd08      	pop	{r3, pc}

080066ba <__math_oflow>:
 80066ba:	b508      	push	{r3, lr}
 80066bc:	2200      	movs	r2, #0
 80066be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80066c2:	f7ff ffdd 	bl	8006680 <xflow>
 80066c6:	ec41 0b10 	vmov	d0, r0, r1
 80066ca:	bd08      	pop	{r3, pc}

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
